  METHOD process_data.

    CONSTANTS:lc_x TYPE char01 VALUE 'X'.

* To Create Order
    DATA: lv_index          TYPE i VALUE 1,
          lv_itemno         TYPE posnr VALUE 10,
          ls_header         TYPE bapisdhead,
          ls_ord_header     TYPE bapisdhd1,
          ls_ord_headerx    TYPE bapisdhd1x,
          ls_headerx        TYPE bapisdheadx,
          ls_item           TYPE bapiitemin,
          lt_ord_item       TYPE TABLE OF bapisditm,
          lt_ord_itemx      TYPE TABLE OF bapisditmx,
          lt_ord_schd       TYPE TABLE OF bapischdl,
          lt_ord_schdx      TYPE TABLE OF bapischdlx,
          lv_vbeln          TYPE vbeln,
          lv_lines          TYPE i,
          lt_item           TYPE TABLE OF bapiitemin,
          lt_partners       TYPE TABLE OF bapipartnr,
          lt_return         TYPE TABLE OF bapiret2,
          lt_order_partners TYPE TABLE OF bapiparnr,
          lt_schedule       TYPE TABLE OF bapischdl,
          ls_schedule       TYPE bapischdl,
          lv_ship_to        TYPE kunnr.


    DATA(lo_rand) = cl_abap_random=>create( ).

    lv_lines = lines( gt_orders ).


    WHILE gv_count < p_ordctr.

      TRY.
* Stop the program if the iteration exceed the number of orders has been selected.
          IF sy-index = lv_lines.

            EXIT.

          ENDIF.

          DATA(lv_progress) = ( gv_count * 100 ) / p_ordctr.
          CALL FUNCTION 'SAPGUI_PROGRESS_INDICATOR'
            EXPORTING
              percentage = lv_progress
              text       = |Simulation Progress : { lv_progress } %|.


* Copy header from the orders
* Get a random customer and header data details

          DATA(ls_order) = VALUE ty_orders( gt_orders[ lo_rand->intinrange( low = 1 high = lv_lines ) ] ).

          ls_header = CORRESPONDING #( ls_order MAPPING doc_type    = auart
                                                        sales_org   = vkorg
                                                        distr_chan  = vtweg
                                                        division    = spart ).

* Copy 3 Item from the orders randomly
* Some order will have 1 or 2 or 3 material based on error list
          DO 3 TIMES.


            DATA(lv_randomnum) = lo_rand->intinrange( low = 1 high = lv_lines ).

            ls_item =  CORRESPONDING #( gt_orders[ lv_randomnum ] MAPPING material = matnr
                                                                          plant    = werks ).



* IF same combination exit, go ahead and pick the next material
            IF line_exists( gt_errorders[ kunnr = ls_order-kunnr matnr = ls_item-material ] ).

              CONTINUE.

            ENDIF.


*            ls_item = VALUE #( po_itm_no = lv_itemno
*                              target_qty = '1.000'
*                              sales_unit = 'EA' ).

*            APPEND VALUE #( po_itm_no = lv_itemno
*                            target_qty = '1.000'
*                            sales_unit = 'EA' ) TO lt_item.

            ls_item-po_itm_no = lv_itemno.
            ls_item-target_qty = '1.000'.
            ls_item-sales_unit = 'EA'.

            APPEND ls_item TO lt_item.


*            ls_schedule = VALUE #( itm_number = lv_itemno
*                                   req_qty = ls_item-target_qty
*                                   req_date = sy-datum ).
            ls_schedule-itm_number = lv_itemno.
            ls_schedule-req_qty = ls_item-target_qty.
            ls_schedule-req_date = sy-datum.
            APPEND ls_schedule TO lt_schedule.


            APPEND VALUE #( material = abap_true plant = abap_true ) TO lt_ord_itemx.
            APPEND VALUE #( itm_number = abap_true req_qty = abap_true req_date = abap_true ) TO lt_ord_schdx.

            lv_itemno = lv_itemno + 10.

            CLEAR : ls_item, ls_schedule.
          ENDDO.

* if no item exist then proceed with next combination
          IF lt_item[] IS INITIAL.

            CONTINUE.

          ENDIF.

          lt_order_partners = VALUE #( ( partn_role = 'AG'
                                         partn_numb = ls_order-kunnr ) ).

          CALL FUNCTION 'BAPI_SALESORDER_SIMULATE'
            EXPORTING
              order_header_in   = ls_header
            IMPORTING
              salesdocument     = lv_vbeln
            TABLES
              order_items_in    = lt_item
              order_partners    = lt_order_partners
              order_schedule_in = lt_schedule
              messagetable      = lt_return.



          IF line_exists( lt_return[ type = 'E' ] ).

            gv_errcount = gv_errcount + 1.

            gs_errorders = CORRESPONDING #( ls_order EXCEPT matnr ).
            gs_errorders-vbeln = ''.

            LOOP AT lt_item ASSIGNING FIELD-SYMBOL(<lfs_item>).

              gs_errorders = CORRESPONDING #( BASE ( gs_errorders ) <lfs_item> MAPPING matnr = material
                                                                                       werks = plant ).

              APPEND CORRESPONDING #( BASE ( gs_errorders ) <lfs_item> ) TO gt_errorders .

            ENDLOOP.

            LOOP AT lt_return ASSIGNING FIELD-SYMBOL(<ls_return>) WHERE type = 'E'.
              gs_errorders-message = <ls_return>-message.
              APPEND gs_errorders TO gt_errorders.

            ENDLOOP.

          ELSE.

            ls_ord_header  = CORRESPONDING #( ls_header ).
            ls_ord_headerx = VALUE #( doc_type    = abap_true
                                      sales_org   = abap_true
                                      distr_chan  = abap_true
                                      division    = abap_true ).

            lt_ord_item    = CORRESPONDING #( lt_item ).
            lt_ord_schd    = CORRESPONDING #( lt_schedule ).

            CALL FUNCTION 'BAPI_SALESORDER_CREATEFROMDAT2'
              EXPORTING
                order_header_in     = ls_ord_header
                order_header_inx    = ls_ord_headerx
              IMPORTING
                salesdocument       = lv_vbeln
              TABLES
                return              = lt_return
                order_items_in      = lt_ord_item
                order_items_inx     = lt_ord_itemx
                order_schedules_in  = lt_ord_schd
                order_schedules_inx = lt_ord_schdx
                order_partners      = lt_order_partners.

            IF NOT line_exists( lt_return[ type = 'E' ] ) AND lv_vbeln IS NOT INITIAL.

** Commit the BAPI Transaction
              CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
                EXPORTING
                  wait = abap_true.

              gs_sucorders = CORRESPONDING #( ls_order EXCEPT vbeln matnr ).
              gs_sucorders-vbeln = lv_vbeln.

              LOOP AT lt_item ASSIGNING <lfs_item>.

                gs_sucorders = CORRESPONDING #( BASE ( gs_sucorders ) <lfs_item> MAPPING matnr = material
                                                                                         werks = plant
                                                                                         posnr = po_itm_no ).


                APPEND CORRESPONDING #( BASE ( gs_sucorders ) <lfs_item> ) TO gt_sucorders .

              ENDLOOP.


              gv_count = gv_count + 1.

            ENDIF.

          ENDIF.

        CATCH cx_root INTO DATA(lo_cx_root).

          DATA(lv_text) = lo_cx_root->get_text( ).

          IF sy-batch = abap_true.
            WRITE lv_text.
          ENDIF.

      ENDTRY.


* Reset all data
      lv_index = lv_index + 1. " Next line

      CLEAR: ls_order, gs_sucorders, gs_errorders, ls_ord_header, ls_ord_headerx, ls_header, ls_headerx, lv_vbeln,
             lt_item[], lt_ord_item[], lt_ord_itemx[], lt_order_partners[], lt_return[], lv_itemno.


*  Reset the item number back to 10
      lv_itemno = 10.

    ENDWHILE.

                  SELECT vbeln
                      posnr
                      kwmeng
                      vrkme
                     FROM vbap
                     INTO TABLE lt_vbap
                     FOR ALL ENTRIES IN gt_sucorders
                     WHERE vbeln = gt_sucorders-vbeln.

              SELECT SINGLE parvw, kunnr
                    FROM vbpa
                        WHERE vbeln = @lv_vbeln
                            AND parvw = 'WE'
                            INTO ( @DATA(lv_parvw), @lv_ship_to ).

              LOOP AT gt_sucorders ASSIGNING FIELD-SYMBOL(<fs_suc>)
                  WHERE vbeln = lv_vbeln.
                READ TABLE lt_vbap INTO ls_vbap
                    WITH KEY vbeln = <fs_suc>-vbeln
                                posnr = <fs_suc>-posnr
                       BINARY SEARCH.
                IF sy-subrc = 0.
                  <fs_suc>-req_qty = ls_vbap-kwmeng.
                  <fs_suc>-req_uom = ls_vbap-vrkme.
                  <fs_suc>-ship_to = lv_ship_to.
                ENDIF.

              ENDLOOP.

  ENDMETHOD.
