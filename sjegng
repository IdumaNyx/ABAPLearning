*&---------------------------------------------------------------------*
*& Report zsim_ord_poc
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
REPORT zsim_ord_poc MESSAGE-ID zotc
                            NO STANDARD PAGE HEADING.


INCLUDE zsim_ord_poc_top." Global Data Declaration
INCLUDE zsim_ord_poc_sel." Selection Screen
INCLUDE zsim_ord_poc_f01." Processing Logic

START-OF-SELECTION.

  DATA(lo_obj) = NEW lcl_order_creation( ).

* Fetch Customer Data
  lo_obj->fetch_data( ).

  IF gt_orders IS NOT INITIAL.

* Process Data
    lo_obj->process_data( ).
* Display Output
    lo_obj->display_output( ).

  ENDIF.


*&---------------------------------------------------------------------*
*&  Include  zsim_ord_poc_top
*&---------------------------------------------------------------------*

    TYPES: BEGIN OF ty_orders,
             vbeln TYPE vbak-vbeln,
             auart TYPE vbak-auart,
             vkorg TYPE vbak-vkorg,
             vtweg TYPE vbak-vtweg,
             spart TYPE vbak-spart,
             kunnr TYPE vbak-kunnr,
             posnr TYPE vbap-posnr,
             matnr TYPE vbap-matnr,
             werks TYPE vbap-werks,
             message TYPE bapiret2-message,
             "error tab
*             ship_to TYPE vbpa-kunnr,
           END OF ty_orders.
           
    DATA: gv_count     TYPE i VALUE 0,
          gv_errcount  TYPE i VALUE 0,
          gt_orders    TYPE TABLE OF ty_orders,
          gs_sucorders TYPE ty_orders,
          gs_errorders TYPE ty_orders,
          gt_sucorders TYPE TABLE OF ty_orders,
          gt_errorders TYPE TABLE OF ty_orders.


    DATA: lt_fieldcat_suc TYPE slis_t_fieldcat_alv,
          lt_fieldcat_err TYPE slis_t_fieldcat_alv,
          ls_fieldcat     TYPE slis_fieldcat_alv.

    CLASS lcl_order_creation DEFINITION.
      PUBLIC SECTION.
        TYPES: BEGIN OF ty_shared,
                 simulation_mode TYPE c LENGTH 1,
               END OF ty_shared.
        METHODS:
          fetch_data,
          process_data,
          display_output.

    ENDCLASS.



*&---------------------------------------------------------------------*
*&  Include  zsim_ord_poc_sel
*&---------------------------------------------------------------------*

DATA: gv_kunnr TYPE kna1-kunnr,
      gv_auart TYPE vbak-auart,
      gv_vkorg TYPE vbak-vkorg,
      gv_vtweg TYPE vbak-vtweg,
      gv_spart TYPE vbak-spart,
      gv_matnr TYPE vbap-matnr,
      gv_werks TYPE vbap-werks.

SELECTION-SCREEN: BEGIN OF BLOCK blk1 WITH FRAME TITLE TEXT-001.

SELECT-OPTIONS: s_kunnr FOR gv_kunnr.                           " Customer Number
SELECT-OPTIONS: s_auart FOR gv_auart NO INTERVALS NO-EXTENSION, " Document Type
                s_vkorg FOR gv_vkorg NO INTERVALS NO-EXTENSION. " Sales Org
SELECT-OPTIONS: s_vtweg FOR gv_vtweg NO INTERVALS NO-EXTENSION, " Dist Channel
                s_spart FOR gv_spart NO INTERVALS NO-EXTENSION, " Division
                s_matnr FOR gv_matnr,
                s_werks FOR gv_werks.

SELECTION-SCREEN: END OF BLOCK blk1.

SELECTION-SCREEN: BEGIN OF BLOCK blk2 WITH FRAME TITLE TEXT-002.

PARAMETERS: p_ordctr TYPE i DEFAULT 3 OBLIGATORY.   " Number of Orders to Simulate

SELECTION-SCREEN: END OF BLOCK blk2.



*&---------------------------------------------------------------------*
*&  Include  zsim_ord_poc_f01
*&---------------------------------------------------------------------*




CLASS lcl_order_creation IMPLEMENTATION.

  METHOD fetch_data.

    DATA: lv_date TYPE syst_datum.

    DATA(lv_count) = p_ordctr * 100.


*    DATA(lv_date) = sy-datum - 1095.

    CALL FUNCTION 'CCM_GO_BACK_MONTHS'
      EXPORTING
        currdate   = sy-datum
        backmonths = 60
      IMPORTING
        newdate    = lv_date.

* Get the Existing Orders from the system for past 1 year
    SELECT  vbak~vbeln,
            vbak~auart,
            vbak~vkorg,
            vbak~vtweg,
            vbak~spart,
            vbak~kunnr,
            vbap~posnr,
            vbap~matnr,
            vbap~werks
*            vbpa~kunnr AS ship_to
         FROM vbak AS vbak
            INNER JOIN vbap AS vbap
            ON vbak~vbeln = vbap~vbeln
*            INNER JOIN kna1 AS kna1
*            ON vbak~kunnr = kna1~kunnr
*            INNER JOIN vbpa AS vbpa
*            ON vbak~vbeln = vbpa~vbeln
         INTO TABLE @gt_orders
         UP TO @lv_count ROWS
       WHERE vbak~vkorg         IN @s_vkorg
       AND   vbak~auart         IN @s_auart
       AND   vbak~vtweg         IN @s_vtweg
       AND   vbak~spart         IN @s_spart
       AND   vbak~kunnr         IN @s_kunnr
       AND   vbap~matnr         IN @s_matnr
       AND   vbap~werks         IN @s_werks
*       AND   vbpa~parvw         EQ 'SH'.
       AND   vbak~erdat >= @lv_date AND vbak~erdat <= @sy-datum.



    IF sy-subrc = 0.

      SORT gt_orders BY kunnr matnr.
      DELETE ADJACENT DUPLICATES FROM gt_orders COMPARING kunnr matnr.

    ENDIF.


  ENDMETHOD.

  METHOD process_data.

    CONSTANTS:lc_x TYPE char01 VALUE 'X'.

* To Create Order
    DATA: lv_index          TYPE i VALUE 1,
          lv_itemno         TYPE posnr VALUE 10,
          ls_header         TYPE bapisdhead,
          ls_ord_header     TYPE bapisdhd1,
          ls_ord_headerx    TYPE bapisdhd1x,
          ls_headerx        TYPE bapisdheadx,
          ls_item           TYPE bapiitemin,
          lt_ord_item       TYPE TABLE OF bapisditm,
          lt_ord_itemx      TYPE TABLE OF bapisditmx,
          lt_ord_schd       TYPE TABLE OF bapischdl,
          lt_ord_schdx      TYPE TABLE OF bapischdlx,
          lv_vbeln          TYPE vbeln,
          lv_lines          TYPE i,
          lt_item           TYPE TABLE OF bapiitemin,
          lt_partners       TYPE TABLE OF bapipartnr,
          lt_return         TYPE TABLE OF bapiret2,
          lt_order_partners TYPE TABLE OF bapiparnr,
          lt_schedule       TYPE TABLE OF bapischdl,
          ls_schedule       TYPE bapischdl.


    DATA(lo_rand) = cl_abap_random=>create( ).

    lv_lines = lines( gt_orders ).


    WHILE gv_count < p_ordctr.

      TRY.
* Stop the program if the iteration exceed the number of orders has been selected.
          IF sy-index = lv_lines.

            EXIT.

          ENDIF.

          DATA(lv_progress) = ( gv_count * 100 ) / p_ordctr.
          CALL FUNCTION 'SAPGUI_PROGRESS_INDICATOR'
            EXPORTING
              percentage = lv_progress
              text       = |Simulation Progress : { lv_progress } %|.


* Copy header from the orders
* Get a random customer and header data details

          DATA(ls_order) = VALUE ty_orders( gt_orders[ lo_rand->intinrange( low = 1 high = lv_lines ) ] ).

          ls_header = CORRESPONDING #( ls_order MAPPING doc_type    = auart
                                                        sales_org   = vkorg
                                                        distr_chan  = vtweg
                                                        division    = spart ).

* Copy 3 Item from the orders randomly
* Some order will have 1 or 2 or 3 material based on error list
          DO 3 TIMES.


            DATA(lv_randomnum) = lo_rand->intinrange( low = 1 high = lv_lines ).

            ls_item =  CORRESPONDING #( gt_orders[ lv_randomnum ] MAPPING material = matnr
                                                                          plant    = werks ).



* IF same combination exit, go ahead and pick the next material
            IF line_exists( gt_errorders[ kunnr = ls_order-kunnr matnr = ls_item-material ] ).

              CONTINUE.

            ENDIF.

            ls_item-po_itm_no = lv_itemno.
            ls_item-target_qty = '1.000'.
            ls_item-sales_unit = 'EA'.

            APPEND ls_item TO lt_item.
            CLEAR ls_item.

            ls_schedule-itm_number = lv_itemno.
            ls_schedule-req_qty = ls_item-target_qty.
            ls_schedule-req_date = sy-datum.
            APPEND ls_schedule TO lt_schedule.
            CLEAR ls_schedule.

            lv_itemno = lv_itemno + 10.

            APPEND VALUE #( material = abap_true plant = abap_true ) TO lt_ord_itemx.
            APPEND VALUE #( itm_number = abap_true req_qty = abap_true req_date = abap_true ) TO lt_ord_schdx.
          ENDDO.

* if no item exist then proceed with next combination
          IF lt_item[] IS INITIAL.

            CONTINUE.

          ENDIF.

          lt_order_partners = VALUE #( ( partn_role = 'AG'
                                         partn_numb = ls_order-kunnr ) ).


          CALL FUNCTION 'BAPI_SALESORDER_SIMULATE'
            EXPORTING
              order_header_in   = ls_header
            IMPORTING
              salesdocument     = lv_vbeln
            TABLES
              order_items_in    = lt_item
              order_partners    = lt_order_partners
              order_schedule_in = lt_schedule
              messagetable      = lt_return.

          LOOP AT lt_return ASSIGNING FIELD-SYMBOL(<ls_return>) WHERE type = 'E'.
            gs_errorders-message = <ls_return>-message.
            APPEND gs_errorders TO gt_errorders.
          ENDLOOP.

          IF line_exists( lt_return[ type = 'E' ] ).

            gv_errcount = gv_errcount + 1.

            gs_errorders = CORRESPONDING #( ls_order EXCEPT matnr ).

            LOOP AT lt_item ASSIGNING FIELD-SYMBOL(<lfs_item>).

              gs_errorders = CORRESPONDING #( BASE ( gs_errorders ) <lfs_item> MAPPING matnr = material
                                                                                       werks = plant      ).

              APPEND CORRESPONDING #( BASE ( gs_errorders ) <lfs_item> ) TO gt_errorders .
              "

            ENDLOOP.


          ELSE.

            ls_ord_header  = CORRESPONDING #( ls_header ).
            ls_ord_headerx = VALUE #( doc_type    = abap_true
                                      sales_org   = abap_true
                                      distr_chan  = abap_true
                                      division    = abap_true ).

            lt_ord_item    = CORRESPONDING #( lt_item ).
            lt_ord_schd    = CORRESPONDING #( lt_schedule ).

            CALL FUNCTION 'BAPI_SALESORDER_CREATEFROMDAT2'
              EXPORTING
                order_header_in  = ls_ord_header
                order_header_inx = ls_ord_headerx
              IMPORTING
                salesdocument    = lv_vbeln
              TABLES
                return           = lt_return
                order_items_in   = lt_ord_item
                order_items_inx  = lt_ord_itemx
                order_schedules_in = lt_ord_schd
                order_schedules_inx = lt_ord_schdx
                order_partners   = lt_order_partners.

            IF NOT line_exists( lt_return[ type = 'E' ] ) AND lv_vbeln IS NOT INITIAL.

** Commit the BAPI Transaction
              CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
                EXPORTING
                  wait = abap_true.

              gs_sucorders = CORRESPONDING #( ls_order EXCEPT vbeln matnr ).
              gs_sucorders-vbeln = lv_vbeln.


              LOOP AT lt_item ASSIGNING <lfs_item>.

                gs_sucorders = CORRESPONDING #( BASE ( gs_sucorders ) <lfs_item> MAPPING matnr = material
                                                                                         werks = plant
                                                                                         posnr = po_itm_no ).


                APPEND CORRESPONDING #( BASE ( gs_sucorders ) <lfs_item> ) TO gt_sucorders .

              ENDLOOP.

              gv_count = gv_count + 1.

            ENDIF.

          ENDIF.

        CATCH cx_root INTO DATA(lo_cx_root).

          DATA(lv_text) = lo_cx_root->get_text( ).

          IF sy-batch = abap_true.
            WRITE lv_text.
          ENDIF.

      ENDTRY.


* Reset all data
      lv_index = lv_index + 1. " Next line

      CLEAR: ls_order, gs_sucorders, gs_errorders, ls_ord_header, ls_ord_headerx, ls_header, ls_headerx,
             lt_item[], lt_ord_item[], lt_ord_itemx[], lt_order_partners[], lt_return[], lv_itemno.


*  Reset the item number back to 10
      lv_itemno = 10.

    ENDWHILE.

  ENDMETHOD.


  METHOD display_output.

    DATA: v_repid      TYPE syrepid,
          gr_table_suc TYPE REF TO cl_salv_table.
    DATA: gr_functions     TYPE REF TO cl_salv_functions.
    DATA: gr_display     TYPE REF TO cl_salv_display_settings,
          lo_grid_layout TYPE REF TO cl_salv_form_layout_grid.

    DATA: s_layout      TYPE slis_layout_alv,
          i_tabname     TYPE slis_tabname,
          it_events_suc TYPE slis_t_event,
          it_events_err TYPE slis_t_event,
          wa_events     TYPE LINE OF slis_t_event.

    PERFORM populate_fieldcat.



    CALL FUNCTION 'REUSE_ALV_BLOCK_LIST_INIT'
      EXPORTING
        i_callback_program = v_repid.

    s_layout-colwidth_optimize = 'X'.
    s_layout-zebra = 'X'.

    i_tabname = 'gt_sucorders'.


    wa_events-name = 'TOP_OF_PAGE'.
    wa_events-form = 'TOP_PAGE1'.
    APPEND wa_events TO it_events_suc.
    CLEAR wa_events.


    CALL FUNCTION 'REUSE_ALV_BLOCK_LIST_APPEND'
      EXPORTING
        is_layout                  = s_layout
        it_fieldcat                = lt_fieldcat_suc
        i_tabname                  = i_tabname
        it_events                  = it_events_suc
      " i_text                     = 'Successful orders'
      TABLES
        t_outtab                   = gt_sucorders
      EXCEPTIONS
        program_error              = 1
        maximum_of_appends_reached = 2
        OTHERS                     = 3.

      IF sy-subrc <> 0.

      ENDIF.

    i_tabname = 'gt_errorders'.

    wa_events-name = 'TOP_OF_PAGE'.
    wa_events-form = 'TOP_PAGE2'.
    APPEND wa_events TO it_events_err.
    CLEAR wa_events.

    CALL FUNCTION 'REUSE_ALV_BLOCK_LIST_APPEND'
      EXPORTING
        is_layout                  = s_layout
        it_fieldcat                = lt_fieldcat_err
        i_tabname                  = i_tabname
        it_events                  = it_events_err
       "i_text                     = text-004
      TABLES
        t_outtab                   = gt_errorders
      EXCEPTIONS
        program_error              = 1
        maximum_of_appends_reached = 2
        OTHERS                     = 3.

      IF sy-subrc <> 0.

      ENDIF.

    CALL FUNCTION 'REUSE_ALV_BLOCK_LIST_DISPLAY'
*                 EXPORTING
*                   I_INTERFACE_CHECK             = ' '
*                   IS_PRINT                      =
*                   I_SCREEN_START_COLUMN         = 0
*                   I_SCREEN_START_LINE           = 0
*                   I_SCREEN_END_COLUMN           = 0
*                   I_SCREEN_END_LINE             = 0
*                 IMPORTING
*                   E_EXIT_CAUSED_BY_CALLER       =
*                   ES_EXIT_CAUSED_BY_USER        =
      EXCEPTIONS
        program_error = 1
        OTHERS        = 2.

      IF sy-subrc <> 0.

      ENDIF.


  ENDMETHOD.
*    TRY.
*
*        cl_salv_table=>factory(
*                                IMPORTING r_salv_table = gr_table_suc
*                                CHANGING  t_table   = gt_sucorders ).
*
*
*        gr_functions = gr_table_suc->get_functions( ).
*        gr_functions->set_all( abap_true ).
*
*        gr_display = gr_table_suc->get_display_settings( ).
*        gr_display->set_list_header('Sales Order Simulation').
*
*
*        CREATE OBJECT lo_grid_layout.
*
*        lo_grid_layout->create_label(
*          EXPORTING
*            row         = 1
*            column      = 1
*            text        = 'Total number of Sales Order Created: ' ).
*
**-- Create normal text
*        lo_grid_layout->create_text(
*          EXPORTING
*            row         = 1
*            column      = 2
*            text        = gv_count
*            tooltip     = gv_count ).
*
*
*        lo_grid_layout->create_label(
*          EXPORTING
*            row         = 2
*            column      = 1
*            text        = 'Total number of Simulation: ' ).
*
**-- Create normal text
*        gv_errcount = gv_errcount + gv_count.
*
*        lo_grid_layout->create_text(
*          EXPORTING
*            row         = 2
*            column      = 2
*            text        = gv_errcount
*            tooltip     = gv_errcount ).
*
*        lo_grid_layout->create_label(
*          EXPORTING
*            row         = 3
*            column      = 1
*            text        = 'Date' ).
*
*        lo_grid_layout->create_text(
*          EXPORTING
*            row         = 3
*            column      = 2
*            text        = sy-datum ).
*
*        gr_table_suc->set_top_of_list( value = lo_grid_layout ). "Header
*
*
*        gr_table_suc->display( ).
*
*
*
*        "CATCH cl
*      CATCH cx_root INTO DATA(lo_cx_root).
*
*        DATA(lv_text) = lo_cx_root->get_text( ).
*        WRITE lv_text.
*
*    ENDTRY.

* ENDMETHOD.


ENDCLASS.

FORM TOP_PAGE1.
  WRITE 'SUCCESSFUL ORDERS'.
ENDFORM.

FORM TOP_PAGE2.
  WRITE 'FAILED ORDERS'.
ENDFORM.

*FORM TOP_PAGE1.
*  DATA: lt_list_commentary TYPE slis_t_listheader,
*        ls_list_commentary TYPE slis_listheader.
*
*  CLEAR ls_list_commentary.
*  ls_list_commentary-typ  = 'H'.  " Header
*  ls_list_commentary-info = 'Successful Sales Order Simulation Report'.
*  APPEND ls_list_commentary TO lt_list_commentary.
*
*  CLEAR ls_list_commentary.
*  ls_list_commentary-typ  = 'S'.  " Selection Info
*  ls_list_commentary-info = |Total Orders Created: { gv_count }|.
*  APPEND ls_list_commentary TO lt_list_commentary.
*
*  CALL FUNCTION 'REUSE_ALV_COMMENTARY_WRITE'
*    EXPORTING
*      it_list_commentary = lt_list_commentary.
*ENDFORM.
*
*FORM TOP_PAGE2.
*  DATA: lt_list_commentary TYPE slis_t_listheader,
*        ls_list_commentary TYPE slis_listheader.
*
*  CLEAR ls_list_commentary.
*  ls_list_commentary-typ  = 'H'.  " Header
*  ls_list_commentary-info = 'Error Orders Simulation Report'.
*  APPEND ls_list_commentary TO lt_list_commentary.
*
*  CLEAR ls_list_commentary.
*  ls_list_commentary-typ  = 'S'.  " Selection Info
*  ls_list_commentary-info = |Total Errors: { gv_errcount }|.
*  APPEND ls_list_commentary TO lt_list_commentary.
*
*  CALL FUNCTION 'REUSE_ALV_COMMENTARY_WRITE'
*    EXPORTING
*      it_list_commentary = lt_list_commentary.
*ENDFORM.

FORM populate_fieldcat.

  ls_fieldcat-col_pos = '1'.
  ls_fieldcat-fieldname = 'VBELN'.
  ls_fieldcat-tabname = 'gt_sucorders'.
  ls_fieldcat-seltext_m = 'Sales Document'.
  APPEND ls_fieldcat TO lt_fieldcat_suc.
  CLEAR ls_fieldcat.

  ls_fieldcat-col_pos = '2'.
  ls_fieldcat-fieldname = 'AUART'.
  ls_fieldcat-tabname = 'gt_sucorders'.
  ls_fieldcat-seltext_m = 'Sales Document Type'.
  APPEND ls_fieldcat TO lt_fieldcat_suc.
  CLEAR ls_fieldcat.

  ls_fieldcat-col_pos = '3'.
  ls_fieldcat-fieldname = 'VKORG'.
  ls_fieldcat-tabname = 'gt_sucorders'.
  ls_fieldcat-seltext_m = 'Sales Organization'.
  APPEND ls_fieldcat TO lt_fieldcat_suc.
  CLEAR ls_fieldcat.

  ls_fieldcat-col_pos = '4'.
  ls_fieldcat-fieldname = 'VTWEG'.
  ls_fieldcat-tabname = 'gt_sucorders'.
  ls_fieldcat-seltext_m = 'Distribution Channel'.
  APPEND ls_fieldcat TO lt_fieldcat_suc.
  CLEAR ls_fieldcat.

  ls_fieldcat-col_pos = '5'.
  ls_fieldcat-fieldname = 'SPART'.
  ls_fieldcat-tabname = 'gt_sucorders'.
  ls_fieldcat-seltext_m = 'Division'.
  APPEND ls_fieldcat TO lt_fieldcat_suc.
  CLEAR ls_fieldcat.

  ls_fieldcat-col_pos = '6'.
  ls_fieldcat-fieldname = 'KUNNR'.
  ls_fieldcat-tabname = 'gt_sucorders'.
  ls_fieldcat-seltext_m = 'Sold-To Party'.
  APPEND ls_fieldcat TO lt_fieldcat_suc.
  CLEAR ls_fieldcat.

  ls_fieldcat-col_pos = '7'.
  ls_fieldcat-fieldname = 'POSNR'.
  ls_fieldcat-tabname = 'gt_sucorders'.
  ls_fieldcat-seltext_m = 'Item'.
  APPEND ls_fieldcat TO lt_fieldcat_suc.
  CLEAR ls_fieldcat.

  ls_fieldcat-col_pos = '8'.
  ls_fieldcat-fieldname = 'MATNR'.
  ls_fieldcat-tabname = 'gt_sucorders'.
  ls_fieldcat-seltext_m = 'Material Number'.
  APPEND ls_fieldcat TO lt_fieldcat_suc.
  CLEAR ls_fieldcat.

  ls_fieldcat-col_pos = '9'.
  ls_fieldcat-fieldname = 'WERKS'.
  ls_fieldcat-tabname = 'gt_sucorders'.
  ls_fieldcat-seltext_m = 'Plant'.
  APPEND ls_fieldcat TO lt_fieldcat_suc.
  CLEAR ls_fieldcat.
  "----------------------------------------------------------------------------------
  ls_fieldcat-col_pos = '1'.
  ls_fieldcat-fieldname = 'VBELN'.
  ls_fieldcat-tabname = 'gt_errorders'.
  ls_fieldcat-seltext_m = 'Sales Document'.
  APPEND ls_fieldcat TO lt_fieldcat_err.
  CLEAR ls_fieldcat.

  ls_fieldcat-col_pos = '2'.
  ls_fieldcat-fieldname = 'AUART'.
  ls_fieldcat-tabname = 'gt_errorders'.
  ls_fieldcat-seltext_m = 'Sales Document Type'.
  APPEND ls_fieldcat TO lt_fieldcat_err.
  CLEAR ls_fieldcat.

  ls_fieldcat-col_pos = '3'.
  ls_fieldcat-fieldname = 'VKORG'.
  ls_fieldcat-tabname = 'gt_errorders'.
  ls_fieldcat-seltext_m = 'Sales Organization'.
  APPEND ls_fieldcat TO lt_fieldcat_err.
  CLEAR ls_fieldcat.

  ls_fieldcat-col_pos = '4'.
  ls_fieldcat-fieldname = 'VTWEG'.
  ls_fieldcat-tabname = 'gt_errorders'.
  ls_fieldcat-seltext_m = 'Distribution Channel'.
  APPEND ls_fieldcat TO lt_fieldcat_err.
  CLEAR ls_fieldcat.

  ls_fieldcat-col_pos = '5'.
  ls_fieldcat-fieldname = 'SPART'.
  ls_fieldcat-tabname = 'gt_errorders'.
  ls_fieldcat-seltext_m = 'Division'.
  APPEND ls_fieldcat TO lt_fieldcat_err.
  CLEAR ls_fieldcat.

  ls_fieldcat-col_pos = '6'.
  ls_fieldcat-fieldname = 'KUNNR'.
  ls_fieldcat-tabname = 'gt_errorders'.
  ls_fieldcat-seltext_m = 'Sold-To Party'.
  APPEND ls_fieldcat TO lt_fieldcat_err.
  CLEAR ls_fieldcat.

  ls_fieldcat-col_pos = '7'.
  ls_fieldcat-fieldname = 'POSNR'.
  ls_fieldcat-tabname = 'gt_errorders'.
  ls_fieldcat-seltext_m = 'Item'.
  APPEND ls_fieldcat TO lt_fieldcat_err.
  CLEAR ls_fieldcat.

  ls_fieldcat-col_pos = '8'.
  ls_fieldcat-fieldname = 'MATNR'.
  ls_fieldcat-tabname = 'gt_errorders'.
  ls_fieldcat-seltext_m = 'Material Number'.
  APPEND ls_fieldcat TO lt_fieldcat_err.
  CLEAR ls_fieldcat.

  ls_fieldcat-col_pos = '9'.
  ls_fieldcat-fieldname = 'D_WERKS'.
  ls_fieldcat-tabname = 'gt_errorders'.
  ls_fieldcat-seltext_m = 'Plant'.
  APPEND ls_fieldcat TO lt_fieldcat_err.
  CLEAR ls_fieldcat.

  ls_fieldcat-col_pos = '10'.
  ls_fieldcat-fieldname = 'MESSAGE'.
  ls_fieldcat-tabname = 'gt_errorders'.
  ls_fieldcat-seltext_m = 'Error Message'.
  ls_fieldcat-outputlen = 100.
  ls_fieldcat-edit = 'X'.
  APPEND ls_fieldcat TO lt_fieldcat_err.
  CLEAR ls_fieldcat.

ENDFORM.


IF line_exists( lt_return[ type = 'E' ] ).
  gv_errcount = gv_errcount + 1.

  LOOP AT lt_item ASSIGNING FIELD-SYMBOL(<lfs_item>).
    READ TABLE lt_return ASSIGNING FIELD-SYMBOL(<ls_return>)
      WITH KEY id = <lfs_item>-po_itm_no.

    IF sy-subrc = 0.
      gs_errorders = CORRESPONDING #( BASE ( gs_errorders ) <lfs_item> MAPPING
                                      matnr = material
                                      werks = plant
                                      message = <ls_return>-message ).
    ELSE.
      gs_errorders = CORRESPONDING #( BASE ( gs_errorders ) <lfs_item> MAPPING
                                      matnr = material
                                      werks = plant
                                      message = 'No specific error message' ).
    ENDIF.

    APPEND gs_errorders TO gt_errorders.
  ENDLOOP.
ENDIF.
