TYPES: BEGIN OF ty_customer,
  kunnr TYPE kna1-kunnr,
  name1 TYPE kna1-name1,
END OF ty_customer.

TYPES: BEGIN OF ty_sales,
  vkorg TYPE knvv-vkorg,
  vtweg TYPE knvv-vtweg,
  spart TYPE knvv-spart,
END OF ty_sales.

TYPES: BEGIN OF ty_material,
  matnr TYPE mara-matnr,
  ersda TYPE mara-ersda,
  mtart TYPE mara-mtart,
END OF ty_material.

TYPES: BEGIN OF ty_order,
  order_id   TYPE char10,
  customer   TYPE ty_customer,
  sales_data TYPE ty_sales,
  material   TYPE ty_material,
  quantity   TYPE i,
END OF ty_order.
------------------------------------------------------------------------------------------------------------------------------

REPORT z_simulate_bapi_orders.

INCLUDE ZINCLUDE_TYPES.   " Include custom type definitions
INCLUDE ZINCLUDE_GLOBALS. " Include global data declarations
INCLUDE ZINCLUDE_FORMS.   " Include form routines

*---------------------------------------------------------------------
* Selection Screen Parameter: Number of orders to simulate
*---------------------------------------------------------------------
PARAMETERS: p_o_num TYPE i DEFAULT 10.

*---------------------------------------------------------------------
* Start of Selection - Load Master Data
*---------------------------------------------------------------------
START-OF-SELECTION.
  DATA(lo_error) = NEW zcl_error_handler( ).
  DATA(lo_master_data) = NEW zcl_master_data( ).
  
  lo_master_data->load_all( lo_error ).  " Load all master data

  DATA(lo_random_generator) = NEW zcl_random_generator(
    it_cust = lo_master_data->it_customers
    it_sales = lo_master_data->it_sales_data
    it_mat = lo_master_data->it_materials
  ).

  PERFORM simulate_bapi_orders USING lo_random_generator.

  " Display results
  PERFORM display_results.


----------------------------------------------------------------------------------------------------------------------------------------------

DATA: it_success_orders TYPE STANDARD TABLE OF ty_order WITH DEFAULT KEY,
      it_failed_orders  TYPE STANDARD TABLE OF ty_order WITH DEFAULT KEY.

DATA: it_customers  TYPE STANDARD TABLE OF kna1,
      it_sales_data TYPE STANDARD TABLE OF knvv,
      it_materials  TYPE STANDARD TABLE OF mara.
-----------------------------------------------------------------------------------------------------------------------------------------------------

CLASS zcl_error_handler DEFINITION.
  PUBLIC SECTION.
    METHODS: handle_error IMPORTING iv_msg TYPE string.
ENDCLASS.

-----------------------------------------------------------------------------------------------------------------------------------------------------

CLASS zcl_error_handler IMPLEMENTATION.
  METHOD handle_error.
    MESSAGE iv_msg TYPE 'E'.  " Display error messages properly
  ENDMETHOD.
ENDCLASS.

-----------------------------------------------------------------------------------------------------------------------------------------------------
CLASS zcl_master_data DEFINITION.
  PUBLIC SECTION.
    DATA: it_customers  TYPE STANDARD TABLE OF kna1,
          it_sales_data TYPE STANDARD TABLE OF knvv,
          it_materials  TYPE STANDARD TABLE OF mara.

    METHODS:
      load_customers IMPORTING io_error TYPE REF TO zcl_error_handler,
      load_sales_data IMPORTING io_error TYPE REF TO zcl_error_handler,
      load_materials IMPORTING io_error TYPE REF TO zcl_error_handler,
      load_all IMPORTING io_error TYPE REF TO zcl_error_handler.
ENDCLASS.


-----------------------------------------------------------------------------------------------------------------------------------------------------
CLASS zcl_master_data IMPLEMENTATION.

  METHOD load_customers.
    SELECT * FROM kna1 INTO TABLE it_customers.
    IF sy-subrc <> 0.
      io_error->handle_error( 'Error loading customer data from KNA1' ).
    ELSE.
      WRITE: / 'KNA1 data loaded: ', LINES( it_customers ), ' records.'.
    ENDIF.
  ENDMETHOD.

  METHOD load_sales_data.
    SELECT * FROM knvv INTO TABLE it_sales_data.
    IF sy-subrc <> 0.
      io_error->handle_error( 'Error loading sales area data from KNVV' ).
    ELSE.
      WRITE: / 'KNVV data loaded: ', LINES( it_sales_data ), ' records.'.
    ENDIF.
  ENDMETHOD.

  METHOD load_materials.
    SELECT * FROM mara INTO TABLE it_materials.
    IF sy-subrc <> 0.
      io_error->handle_error( 'Error loading material data from MARA' ).
    ELSE.
      WRITE: / 'MARA data loaded: ', LINES( it_materials ), ' records.'.
    ENDIF.
  ENDMETHOD.

  METHOD load_all.
    load_customers( io_error ).
    load_sales_data( io_error ).
    load_materials( io_error ).
  ENDMETHOD.

ENDCLASS.


-----------------------------------------------------------------------------------------------------------------------------------------------------
FORM simulate_bapi_orders USING lo_random TYPE REF TO zcl_random_generator.
  DATA: lv_count TYPE i,
        ls_order TYPE ty_order.

  DO p_o_num TIMES.
    " Generate a new random order
    ls_order = lo_random->select_random_order( ).

    " Store in successful orders for now (will handle failed orders later)
    APPEND ls_order TO it_success_orders.
  ENDDO.
ENDFORM.


-----------------------------------------------------------------------------------------------------------------------------------------------------
CLASS zcl_random_generator DEFINITION.
  PUBLIC SECTION.
    METHODS:
      constructor IMPORTING it_cust TYPE TABLE OF kna1
                           it_sales TYPE TABLE OF knvv
                           it_mat TYPE TABLE OF mara,
      select_random_customer RETURNING VALUE(ro_customer) TYPE ty_customer,
      select_random_sales_area RETURNING VALUE(ro_sales) TYPE ty_sales,
      select_random_material RETURNING VALUE(ro_material) TYPE ty_material,
      generate_random_quantity RETURNING VALUE(rv_quantity) TYPE i,
      select_random_order RETURNING VALUE(ro_order) TYPE ty_order.
      
  PRIVATE SECTION.
    DATA: it_customers TYPE TABLE OF kna1,
          it_sales_data TYPE TABLE OF knvv,
          it_materials TYPE TABLE OF mara.
ENDCLASS.

-----------------------------------------------------------------------------------------------------------------------------------------------------
CLASS zcl_random_generator IMPLEMENTATION.

  METHOD constructor.
    me->it_customers = it_cust.
    me->it_sales_data = it_sales.
    me->it_materials = it_mat.
  ENDMETHOD.

  METHOD select_random_customer.
    DATA lv_random_index TYPE i.
    DATA(lo_random) = cl_abap_random_int=>create( seed = sy-uzeit min = 1 max = LINES( it_customers ) ).
    lv_random_index = lo_random->get_next( ).
    READ TABLE it_customers INDEX lv_random_index INTO ro_customer.
  ENDMETHOD.

  METHOD select_random_sales_area.
    DATA lv_random_index TYPE i.
    DATA(lo_random) = cl_abap_random_int=>create( seed = sy-uzeit min = 1 max = LINES( it_sales_data ) ).
    lv_random_index = lo_random->get_next( ).
    READ TABLE it_sales_data INDEX lv_random_index INTO ro_sales.
  ENDMETHOD.

  METHOD select_random_material.
    DATA lv_random_index TYPE i.
    DATA(lo_random) = cl_abap_random_int=>create( seed = sy-uzeit min = 1 max = LINES( it_materials ) ).
    lv_random_index = lo_random->get_next( ).
    READ TABLE it_materials INDEX lv_random_index INTO ro_material.
  ENDMETHOD.

  METHOD generate_random_quantity.
    DATA(lo_random) = cl_abap_random_int=>create( seed = sy-uzeit min = 1 max = 100 ).
    rv_quantity = lo_random->get_next( ).
  ENDMETHOD.

  METHOD select_random_order.
    CLEAR ro_order.
    ro_order-customer = select_random_customer( ).
    ro_order-sales_data = select_random_sales_area( ).
    ro_order-material = select_random_material( ).
    ro_order-quantity = generate_random_quantity( ).
  ENDMETHOD.

ENDCLASS.

-----------------------------------------------------------------------------------------------------------------------------------------------------


-----------------------------------------------------------------------------------------------------------------------------------------------------


