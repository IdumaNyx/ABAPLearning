REPORT zsimulate_bapi_orders4.

CLASS zcl_order_simulator DEFINITION FINAL CREATE PUBLIC.
  PUBLIC SECTION.
    METHODS:
      constructor,
      load_master_data,
      build_customer_product_matrix,
      validate_product_availability,
      simulate_orders,
      display_results.

  PRIVATE SECTION.
    TYPES: 
      BEGIN OF ty_customer,
        kunnr TYPE kna1-kunnr,
        name1 TYPE kna1-name1,
      END OF ty_customer,

      BEGIN OF ty_sales,
        vkorg TYPE knvv-vkorg,
        vtweg TYPE knvv-vtweg,
        spart TYPE knvv-spart,
      END OF ty_sales,

      BEGIN OF ty_material,
        matnr TYPE mara-matnr,
        ersda TYPE mara-ersda,
        mtart TYPE mara-mtart,
        labst TYPE marc-labst, " Stock available
      END OF ty_material,

      BEGIN OF ty_order,
        order_id   TYPE char10,
        customer   TYPE ty_customer,
        sales_data TYPE ty_sales,
        material   TYPE ty_material,
        quantity   TYPE i,
      END OF ty_order.

    DATA:
      it_success_orders TYPE TABLE OF ty_order WITH EMPTY KEY,
      it_failed_orders  TYPE TABLE OF ty_order WITH EMPTY KEY,
      it_customers      TYPE TABLE OF kna1 WITH EMPTY KEY,
      it_sales_data     TYPE TABLE OF knvv WITH EMPTY KEY,
      it_materials      TYPE TABLE OF mara WITH EMPTY KEY,
      it_product_matrix TYPE TABLE OF ty_order WITH EMPTY KEY.

ENDCLASS.

"-----------------------------------------------------------------------
" IMPLEMENTATION
"-----------------------------------------------------------------------

CLASS zcl_order_simulator IMPLEMENTATION.

  METHOD constructor.
    " Constructor - Can initialize parameters if needed.
  ENDMETHOD.

  METHOD load_master_data.
    " Load Customer Data
    SELECT kunnr, name1 FROM kna1 INTO TABLE @it_customers.

    " Load Sales Data
    SELECT kunnr, vkorg, vtweg, spart FROM knvv INTO TABLE @it_sales_data.

    " Load Material Data with Stock Availability
    SELECT matnr, ersda, mtart FROM mara INTO TABLE @it_materials.
  ENDMETHOD.

  METHOD build_customer_product_matrix.
    " Generate cross-matrix of customer-product combinations
    it_product_matrix = VALUE #( 
      FOR c IN it_customers 
      FOR m IN it_materials 
      FOR s IN it_sales_data 
      WHERE ( c-kunnr = s-kunnr )  " Ensure valid customer-sales match
      ( 
        order_id   = |ORD{ sy-index }|, 
        customer   = VALUE ty_customer( kunnr = c-kunnr name1 = c-name1 ),
        sales_data = VALUE ty_sales( vkorg = s-vkorg vtweg = s-vtweg spart = s-spart ),
        material   = VALUE ty_material( matnr = m-matnr ersda = m-ersda mtart = m-mtart ),
        quantity   = cl_abap_random_int=>create( seed = sy-uzeit min = 1 max = 100 )->get_next( )
      )
    ).
  ENDMETHOD.

  METHOD validate_product_availability.
    DELETE it_product_matrix WHERE material-matnr NOT IN (
      SELECT matnr FROM marc WHERE labst > 0
    ). " Ensure stock availability
  ENDMETHOD.

  METHOD simulate_orders.
    DATA: ls_order TYPE ty_order,
          it_return TYPE TABLE OF bapiret2,
          ls_order_header TYPE bapisdhead,
          it_order_items TYPE TABLE OF bapiitemin,
          it_order_partners TYPE TABLE OF bapiparnr.

    LOOP AT it_product_matrix INTO ls_order.

      " Populate Order Header
      ls_order_header = VALUE bapisdhead(
        doc_type   = p_o_type,
        sales_org  = ls_order-sales_data-vkorg,
        distr_chan = ls_order-sales_data-vtweg,
        division   = ls_order-sales_data-spart ).

      " Populate Order Item
      it_order_items = VALUE #( ( material = ls_order-material-matnr target_qty = ls_order-quantity ) ).

      " Populate Order Partner
      it_order_partners = VALUE #( ( partn_role = 'AG' partn_numb = ls_order-customer-kunnr ) ).

      " Call BAPI
      CALL FUNCTION 'BAPI_SALESORDER_SIMULATE'
        EXPORTING order_header_in = ls_order_header
        TABLES order_items_in = it_order_items
               order_partners = it_order_partners
               messagetable   = it_return.

      " Process results
      READ TABLE it_return TRANSPORTING NO FIELDS WITH KEY type = 'E'.
      IF sy-subrc = 0.
        APPEND ls_order TO it_failed_orders.
      ELSE.
        APPEND ls_order TO it_success_orders.
      ENDIF.

    ENDLOOP.
  ENDMETHOD.

  METHOD display_results.
    WRITE: / '--- Successful Orders ---'.
    LOOP AT it_success_orders INTO DATA(ls_succ_order).
      WRITE: / |ORDER: { ls_succ_order-order_id } |,
             |CUSTOMER: { ls_succ_order-customer-name1 } |,
             |MATERIAL: { ls_succ_order-material-matnr } |,
             |QUANTITY: { ls_succ_order-quantity } |.
    ENDLOOP.

    WRITE: / '--- Failed Orders ---'.
    LOOP AT it_failed_orders INTO DATA(ls_fail_order).
      WRITE: / |FAILED ORDER: { ls_fail_order-order_id } |,
             |CUSTOMER: { ls_fail_order-customer-name1 } |,
             |MATERIAL: { ls_fail_order-material-matnr } |,
             |QUANTITY: { ls_fail_order-quantity } |.
    ENDLOOP.
  ENDMETHOD.

ENDCLASS.

"-----------------------------------------------------------------------
" MAIN EXECUTION BLOCK
"-----------------------------------------------------------------------

START-OF-SELECTION.

DATA(go_order_simulator) = NEW zcl_order_simulator( ).

go_order_simulator->load_master_data( ).  " Load data
go_order_simulator->build_customer_product_matrix( ). " Cross-matrix logic
go_order_simulator->validate_product_availability( ). " Validate stock
go_order_simulator->simulate_orders( ). " Generate and simulate orders
go_order_simulator->display_results( ). " Display results


======================================

METHOD build_customer_product_matrix.

  lv_seed = sy-uzeit * sy-tabix * sy-index + sy-datum.

  " Ensure the correct field names are referenced
  it_product_matrix = VALUE #( 
    FOR c IN it_customers 
    FOR s IN it_sales_data 
    FOR m IN it_materials 
    WHERE ( c-kunnr = s-kunnr )  " Ensure valid customer-sales match
    ( 
      order_id   = |ORD{ sy-index }|, 
      customer   = VALUE ty_customer( kunnr = c-kunnr name1 = c-name1 ),
      sales_data = VALUE ty_sales( vkorg = s-vkorg vtweg = s-vtweg spart = s-spart ),
      material   = VALUE ty_material( matnr = m-matnr ersda = m-ersda mtart = m-mtart ),
      quantity   = cl_abap_random_int=>create( seed = lv_seed min = 1 max = 100 )->get_next( )
    )
  ).

ENDMETHOD.


===================

METHOD build_customer_product_matrix.

  lv_seed = sy-uzeit * sy-tabix * sy-index + sy-datum.

  " Ensure the correct field names are referenced
  it_product_matrix = VALUE #( 
    FOR c IN it_customers 
    FOR s IN it_sales_data 
    FOR m IN it_materials 
    WHERE ( c-kunnr = s-kunnr )  " Ensure valid customer-sales match
    ( 
      order_id   = |ORD{ sy-index }|, 
      customer   = VALUE ty_customer( kunnr = c-kunnr name1 = c-name1 ),
      sales_data = VALUE ty_sales( vkorg = s-vkorg vtweg = s-vtweg spart = s-spart ),
      material   = VALUE ty_material( matnr = m-matnr ersda = m-ersda mtart = m-mtart ),
      quantity   = cl_abap_random_int=>create( seed = lv_seed min = 1 max = 100 )->get_next( )
    )
  ).

ENDMETHOD.

==================

METHOD build_customer_product_matrix.

  DATA: ls_customer TYPE kna1,
        ls_sales    TYPE knvv,
        ls_material TYPE mara,
        ls_order    TYPE ty_order.

  CLEAR it_product_matrix.

  LOOP AT it_customers INTO ls_customer.
    LOOP AT it_sales_data INTO ls_sales WHERE kunnr = ls_customer-kunnr.
      LOOP AT it_materials INTO ls_material.

        CLEAR ls_order.
        ls_order-order_id = |ORD{ sy-tabix }|.
        ls_order-customer-kunnr = ls_customer-kunnr.
        ls_order-customer-name1 = ls_customer-name1.

        ls_order-sales_data-vkorg = ls_sales-vkorg.
        ls_order-sales_data-vtweg = ls_sales-vtweg.
        ls_order-sales_data-spart = ls_sales-spart.

        ls_order-material-matnr = ls_material-matnr.
        ls_order-material-ersda = ls_material-ersda.
        ls_order-material-mtart = ls_material-mtart.

        ls_order-quantity = cl_abap_random_int=>create( seed = sy-uzeit * sy-tabix * sy-index + sy-datum min = 1 max = 100 )->get_next( ).

        APPEND ls_order TO it_product_matrix.

      ENDLOOP.
    ENDLOOP.
  ENDLOOP.

ENDMETHOD.

========================


METHOD validate_product_availability.

  DATA: ls_order TYPE ty_order,
        lv_unit TYPE meins,
        lt_wmdvsx TYPE TABLE OF bapiwmdvsx,
        lt_wmdvex TYPE TABLE OF bapiwmdvex,
        ls_wmdvsx TYPE bapiwmdvsx,
        lv_total_available_qty TYPE bapicm6iv-wkbst.

  LOOP AT it_product_matrix INTO ls_order.

    CLEAR: lt_wmdvsx, lt_wmdvex, lv_total_available_qty.

    " Get unit from MARA
    SELECT SINGLE meins FROM mara INTO @lv_unit WHERE matnr = ls_order-material-matnr.
    IF sy-subrc <> 0.
      lv_unit = 'EA'. " Fallback unit if not found
    ENDIF.

    " Prepare input requirement (today's date, requested quantity, unit)
    ls_wmdvsx-req_date = sy-datum.
    ls_wmdvsx-req_qty = ls_order-quantity.
    ls_wmdvsx-req_qty_unit = lv_unit.
    APPEND ls_wmdvsx TO lt_wmdvsx.

    " Call Availability Check BAPI
    CALL FUNCTION 'BAPI_MATERIAL_AVAILABILITY'
      EXPORTING
        material  = ls_order-material-matnr
        plant     = '1000'                    " Fetch dynamically if required
        check_rule = 'A'
      TABLES
        wmdvsx    = lt_wmdvsx
        wmdvex    = lt_wmdvex.

    " Sum up all available quantities (sometimes ATP check gives per day split)
    LOOP AT lt_wmdvex INTO DATA(ls_wmdvex).
      lv_total_available_qty = lv_total_available_qty + ls_wmdvex-conf_qty.
    ENDLOOP.

    " If no data returned or insufficient stock, remove item from matrix
    IF lv_total_available_qty < ls_order-quantity.
      DELETE it_product_matrix INDEX sy-tabix.
    ENDIF.

  ENDLOOP.

ENDMETHOD.


===========================

REPORT zsimulate_bapi_orders1.

CLASS zcl_order_simulator DEFINITION FINAL CREATE PUBLIC.
  PUBLIC SECTION.
    METHODS:
      constructor,
      load_master_data,
      build_customer_product_matrix,
      validate_product_availability,
      simulate_orders,
      display_results.

  PRIVATE SECTION.
    TYPES:
      BEGIN OF ty_customer,
        kunnr TYPE kna1-kunnr,
        name1 TYPE kna1-name1,
      END OF ty_customer,

      BEGIN OF ty_sales,
        kunnr TYPE knvv-kunnr,
        vkorg TYPE knvv-vkorg,
        vtweg TYPE knvv-vtweg,
        spart TYPE knvv-spart,
      END OF ty_sales,

      BEGIN OF ty_material,
        matnr TYPE mara-matnr,
        ersda TYPE mara-ersda,
        mtart TYPE mara-mtart,
        "labst TYPE marc-labst, " Stock available
      END OF ty_material,

      BEGIN OF ty_order,
        order_id   TYPE char10,
        customer   TYPE ty_customer,
        sales_data TYPE ty_sales,
        material   TYPE ty_material,
        quantity   TYPE i,
      END OF ty_order.

    DATA:
      it_success_orders TYPE TABLE OF ty_order WITH EMPTY KEY,
      it_failed_orders  TYPE TABLE OF ty_order WITH EMPTY KEY,
      it_customers      TYPE TABLE OF kna1 WITH EMPTY KEY,
      it_sales_data     TYPE TABLE OF knvv WITH EMPTY KEY,
      it_materials      TYPE TABLE OF mara WITH EMPTY KEY,
      it_product_matrix TYPE TABLE OF ty_order WITH EMPTY KEY,
      lv_seed TYPE i.


ENDCLASS.

"-----------------------------------------------------------------------
" IMPLEMENTATION
"-----------------------------------------------------------------------

CLASS zcl_order_simulator IMPLEMENTATION.

  METHOD constructor.
    " Constructor - Can initialize parameters if needed.
  ENDMETHOD.

  METHOD load_master_data.
    " Load Customer Data
    SELECT mandt, kunnr, name1 FROM kna1 INTO TABLE @it_customers.

    " Load Sales Data
    SELECT mandt, kunnr, vkorg, vtweg, spart FROM knvv INTO TABLE @it_sales_data.

    " Load Material Data with Stock Availability
    SELECT mandt, matnr, ersda, mtart FROM mara INTO TABLE @it_materials.
  ENDMETHOD.

*  METHOD build_customer_product_matrix.
*
*  lv_seed = sy-uzeit * sy-tabix * sy-index + sy-datum.
*    " Generate cross-matrix of customer-product combinations
*    it_product_matrix = VALUE #(
*      FOR c IN it_customers
*      FOR m IN it_materials
*      FOR s IN it_sales_data
*      WHERE ( c-kunnr = s-kunnr )  " Ensure valid customer-sales match
*      (
*        order_id   = |ORD{ sy-index }|
*        customer   = VALUE ty_customer( kunnr = c-kunnr name1 = c-name1 )
*        sales_data = VALUE ty_sales( vkorg = s-vkorg vtweg = s-vtweg spart = s-spart )
*        material   = VALUE ty_material( matnr = m-matnr ersda = m-ersda mtart = m-mtart )
*        quantity   = cl_abap_random_int=>create( seed = lv_seed min = 1 max = 100 )->get_next( )
*      )
*    ).
*  ENDMETHOD.

METHOD build_customer_product_matrix.

  DATA: ls_customer TYPE kna1,
        ls_sales    TYPE knvv,
        ls_material TYPE mara,
        ls_order    TYPE ty_order.

  CLEAR it_product_matrix.

  LOOP AT it_customers INTO ls_customer.
    LOOP AT it_sales_data INTO ls_sales WHERE kunnr = ls_customer-kunnr.
      LOOP AT it_materials INTO ls_material.

        CLEAR ls_order.
        ls_order-order_id = |ORD{ sy-tabix }|.
        ls_order-customer-kunnr = ls_customer-kunnr.
        ls_order-customer-name1 = ls_customer-name1.

        ls_order-sales_data-vkorg = ls_sales-vkorg.
        ls_order-sales_data-vtweg = ls_sales-vtweg.
        ls_order-sales_data-spart = ls_sales-spart.

        ls_order-material-matnr = ls_material-matnr.
        ls_order-material-ersda = ls_material-ersda.
        ls_order-material-mtart = ls_material-mtart.

        ls_order-quantity = cl_abap_random_int=>create( seed = sy-uzeit * sy-tabix * sy-index + sy-datum min = 1 max = 100 )->get_next( ).

        APPEND ls_order TO it_product_matrix.

      ENDLOOP.
    ENDLOOP.
  ENDLOOP.

ENDMETHOD.

* METHOD validate_product_availability.
*
*    DELETE it_product_matrix WHERE material-matnr NOT IN (
*      SELECT matnr FROM marc WHERE labst > 0
*    ). " Ensure stock availability
* ENDMETHOD.

METHOD validate_product_availability.

  DATA: ls_order TYPE ty_order,
        lv_unit TYPE unit,
        lt_wmdvsx TYPE TABLE OF bapiwmdvs,
        lt_wmdvex TYPE TABLE OF bapiwmdve,
        ls_wmdvsx TYPE bapiwmdvs,
        lv_total_available_qty TYPE BAPICM61V-WKBST.

  LOOP AT it_product_matrix INTO ls_order.

    CLEAR: lt_wmdvsx, lt_wmdvex, lv_total_available_qty.

    " Get unit from MARA
    SELECT SINGLE meins FROM mara INTO lv_unit WHERE matnr = ls_order-material-matnr.
    IF sy-subrc <> 0.
      lv_unit = 'EA'. " Fallback unit if not found
    ENDIF.

    " Prepare input requirement (today's date, requested quantity, unit)
    ls_wmdvsx-req_date = sy-datum.
    ls_wmdvsx-req_qty = ls_order-quantity.
    "ls_wmdvsx-req_qty_unit = lv_unit.
    APPEND ls_wmdvsx TO lt_wmdvsx.

    " Call Availability Check BAPI
    CALL FUNCTION 'BAPI_MATERIAL_AVAILABILITY'
      EXPORTING
        material  = ls_order-material-matnr
        plant     = '1000'                    " Fetch dynamically if required
        check_rule = 'A'
        unit = 'EA'
      TABLES
        wmdvsx    = lt_wmdvsx
        wmdvex    = lt_wmdvex.

    " Sum up all available quantities (sometimes ATP check gives per day split)
    LOOP AT lt_wmdvex INTO DATA(ls_wmdvex).
      lv_total_available_qty = lv_total_available_qty." + ls_wmdvex-conf_qty.
    ENDLOOP.

    " If no data returned or insufficient stock, remove item from matrix
    IF lv_total_available_qty < ls_order-quantity.
      DELETE it_product_matrix INDEX sy-tabix.
    ENDIF.

  ENDLOOP.

ENDMETHOD.


  METHOD simulate_orders.
    DATA: ls_order TYPE ty_order,
          it_return TYPE TABLE OF bapiret2,
          ls_order_header TYPE bapisdhead,
          it_order_items TYPE TABLE OF bapiitemin,
          it_order_partners TYPE TABLE OF bapiparnr.

    LOOP AT it_product_matrix INTO ls_order.

      " Populate Order Header
      ls_order_header = VALUE bapisdhead(
        doc_type   = 'TA'
        sales_org  = ls_order-sales_data-vkorg
        distr_chan = ls_order-sales_data-vtweg
        division   = ls_order-sales_data-spart ).

      " Populate Order Item
      it_order_items = VALUE #( ( material = ls_order-material-matnr target_qty = ls_order-quantity ) ).

      " Populate Order Partner
      it_order_partners = VALUE #( ( partn_role = 'AG' partn_numb = ls_order-customer-kunnr ) ).

      " Call BAPI
      CALL FUNCTION 'BAPI_SALESORDER_SIMULATE'
        EXPORTING order_header_in = ls_order_header
        TABLES order_items_in = it_order_items
               order_partners = it_order_partners
               messagetable   = it_return.

      " Process results
      READ TABLE it_return TRANSPORTING NO FIELDS WITH KEY type = 'E'.
      IF sy-subrc = 0.
        APPEND ls_order TO it_failed_orders.
      ELSE.
        APPEND ls_order TO it_success_orders.
      ENDIF.

    ENDLOOP.
  ENDMETHOD.

  METHOD display_results.
    WRITE: / '--- Successful Orders ---'.
    LOOP AT it_success_orders INTO DATA(ls_succ_order).
      WRITE: / |ORDER: { ls_succ_order-order_id } |,
             |CUSTOMER: { ls_succ_order-customer-name1 } |,
             |MATERIAL: { ls_succ_order-material-matnr } |,
             |QUANTITY: { ls_succ_order-quantity } |.
    ENDLOOP.

    WRITE: / '--- Failed Orders ---'.
    LOOP AT it_failed_orders INTO DATA(ls_fail_order).
      WRITE: / |FAILED ORDER: { ls_fail_order-order_id } |,
             |CUSTOMER: { ls_fail_order-customer-name1 } |,
             |MATERIAL: { ls_fail_order-material-matnr } |,
             |QUANTITY: { ls_fail_order-quantity } |.
    ENDLOOP.
  ENDMETHOD.

ENDCLASS.

"-----------------------------------------------------------------------
" MAIN EXECUTION BLOCK
"-----------------------------------------------------------------------

START-OF-SELECTION.

DATA(go_order_simulator) = NEW zcl_order_simulator( ).

go_order_simulator->load_master_data( ).  " Load data
go_order_simulator->build_customer_product_matrix( ). " Cross-matrix logic
go_order_simulator->validate_product_availability( ). " Validate stock
go_order_simulator->simulate_orders( ). " Generate and simulate orders
go_order_simulator->display_results( ). " Display results
