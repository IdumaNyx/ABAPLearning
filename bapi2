*&---------------------------------------------------------------------*
*& Include ZSIMULATE_BAPI_ORDERS4_SEL
*& Selection-Screen Elements
*&---------------------------------------------------------------------*

PARAMETERS: 
  p_o_num TYPE i DEFAULT 10.   " Number of Orders to Simulate

SELECTION-SCREEN BEGIN OF BLOCK b1 WITH FRAME TITLE text-001.
  PARAMETERS: 
    p_ord_type TYPE char4 DEFAULT 'TA' OBLIGATORY, " Order Type Filter
    p_vkorg TYPE knvv-vkorg OBLIGATORY,            " Sales Organization
    p_vtweg TYPE knvv-vtweg,                      " Distribution Channel
    p_spart TYPE knvv-spart.                      " Division
SELECTION-SCREEN END OF BLOCK b1.



______________

METHOD simulate_orders.
    DATA: lv_count TYPE i,
          ls_order TYPE ty_order,
          ls_return TYPE bapiret2,
          it_return TYPE TABLE OF bapiret2,
          ls_order_header TYPE bapisdhead,
          it_order_items TYPE TABLE OF bapiitemin,
          it_order_partners TYPE TABLE OF bapiparnr,
          ls_order_item TYPE bapiitemin,
          ls_order_partner TYPE bapiparnr.

    DO p_o_num TIMES.
      " Generate a new random order
      PERFORM select_random_data CHANGING ls_order.

      " Apply Selection-Screen Filters
      IF ls_order-sales_data-vkorg <> p_vkorg OR 
         ( p_vtweg IS NOT INITIAL AND ls_order-sales_data-vtweg <> p_vtweg ) OR
         ( p_spart IS NOT INITIAL AND ls_order-sales_data-spart <> p_spart ).
        CONTINUE. " Skip order if it does not match filter criteria
      ENDIF.

      " Populate order header fields
      CLEAR ls_order_header.
      ls_order_header-doc_type = p_ord_type.  " Use selected Order Type
      ls_order_header-sales_org = ls_order-sales_data-vkorg.
      ls_order_header-distr_chan = ls_order-sales_data-vtweg.
      ls_order_header-division = ls_order-sales_data-spart.

      " Populate Order Item (Material)"
      CLEAR: ls_order_item, it_order_items.
      ls_order_item-material = ls_order-material-matnr.
      ls_order_item-target_qty = ls_order-quantity.
      APPEND ls_order_item TO it_order_items.

      " Populate Order Partner (Customer)"
      CLEAR: ls_order_partner, it_order_partners.
      ls_order_partner-partn_role = 'AG'.
      ls_order_partner-partn_numb = ls_order-customer-kunnr.
      APPEND ls_order_partner TO it_order_partners.

      " Call the BAPI
      CALL FUNCTION 'BAPI_SALESORDER_SIMULATE'
        EXPORTING
          order_header_in = ls_order_header
        TABLES
          order_items_in = it_order_items
          order_partners = it_order_partners
          messagetable = it_return.

      " Check if the BAPI simulation was successful
      READ TABLE it_return INTO ls_return WITH KEY type = 'E'.
      IF sy-subrc = 0.
        APPEND ls_order TO it_failed_orders.
      ELSE.
        APPEND ls_order TO it_success_orders.
      ENDIF.

    ENDDO.

  ENDMETHOD.


__________________


FORM select_random_data CHANGING eo_order TYPE ty_order.
  DATA: lv_random_index TYPE i,
        lv_max_customers TYPE i VALUE 0,
        lv_max_sales TYPE i VALUE 0,
        lv_max_materials TYPE i VALUE 0,
        lv_seed TYPE i.

  lv_seed = sy-uzeit+4(2) * 100 + sy-uzeit+2(2) * 10 + sy-uzeit+0(2).

  lv_max_customers = LINES( go_order_simulator->it_customers ).
  lv_max_sales = LINES( go_order_simulator->it_sales_data ).
  lv_max_materials = LINES( go_order_simulator->it_materials ).

  IF lv_max_customers = 0 OR lv_max_sales = 0 OR lv_max_materials = 0.
    MESSAGE 'One or more master data tables are empty!' TYPE 'E'.
  ENDIF.

  " Select Random Customer
  DATA(lo_random_customer) = cl_abap_random_int=>create( seed = lv_seed min = 1 max = lv_max_customers ).
  lv_random_index = lo_random_customer->get_next( ).
  READ TABLE go_order_simulator->it_customers INDEX lv_random_index INTO eo_order-customer.
  IF sy-subrc <> 0.
    MESSAGE 'Error selecting random customer' TYPE 'E'.
  ENDIF.

  " Select Random Sales Data Matching Selection Criteria
  DATA(lo_random_sales) = cl_abap_random_int=>create( seed = lv_seed min = 1 max = lv_max_sales ).
  LOOP AT go_order_simulator->it_sales_data INTO eo_order-sales_data 
       WHERE vkorg = p_vkorg 
         AND ( p_vtweg IS INITIAL OR vtweg = p_vtweg )
         AND ( p_spart IS INITIAL OR spart = p_spart ).

    lv_random_index = lo_random_sales->get_next( ).
    EXIT. " Stop once we find a valid match
  ENDLOOP.
  
  IF sy-subrc <> 0.
    MESSAGE 'Error selecting random sales area' TYPE 'E'.
  ENDIF.

  " Select Random Material
  DATA(lo_random_material) = cl_abap_random_int=>create( seed = lv_seed min = 1 max = lv_max_materials ).
  lv_random_index = lo_random_material->get_next( ).
  READ TABLE go_order_simulator->it_materials INDEX lv_random_index INTO eo_order-material.
  IF sy-subrc <> 0.
    MESSAGE 'Error selecting random material' TYPE 'E'.
  ENDIF.

  " Generate Random Quantity
  DATA(lo_random_qty) = cl_abap_random_int=>create( seed = lv_seed min = 1 max = 100 ).
  eo_order-quantity = lo_random_qty->get_next( ).

ENDFORM.