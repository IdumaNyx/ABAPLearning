*&---------------------------------------------------------------------*
*&  Include  zmotc_simulate_orders_f01
*&---------------------------------------------------------------------*

CLASS lcl_order_creation IMPLEMENTATION.

  METHOD fetch_data.

    DATA lv_date TYPE syst_datum.
    DATA(lv_count) = p_ordctr * 100.
    DATA: lt_valid_customers TYPE TABLE OF kna1-kunnr,
          lt_invalid_customers TYPE TABLE OF kna1-kunnr,
          lt_customer_check TYPE TABLE OF vbak-kunnr,
          lv_count_valid TYPE i.

    CALL FUNCTION 'CCM_GO_BACK_MONTHS'
      EXPORTING
        currdate   = sy-datum
        backmonths = 60
      IMPORTING
        newdate    = lv_date.

* Get the Existing Orders from the system for past 1 year
    SELECT  vbak~vbeln,
            vbak~auart,
            vbak~vkorg,
            vbak~vtweg,
            vbak~spart,
            vbak~kunnr,
            vbap~posnr,
            vbap~matnr,
            vbap~werks
         FROM vbak AS vbak
            INNER JOIN vbap AS vbap
            ON vbak~vbeln = vbap~vbeln
         INTO TABLE @gt_orders
         UP TO @lv_count ROWS
       WHERE vbak~vkorg         IN @s_vkorg
       AND   vbak~vtweg         IN @s_vtweg
       AND   vbak~spart         IN @s_spart
       AND   vbak~kunnr         IN @s_kunnr
       AND   vbap~matnr         IN @s_matnr
       AND   vbap~werks         IN @s_werks
       AND   vbak~erdat >= @lv_date AND vbak~erdat <= @sy-datum.

* Validate Customers
    SELECT DISTINCT kunnr 
      FROM vbak
      INTO TABLE lt_customer_check
      WHERE kunnr IN @s_kunnr.

    SELECT kunnr 
      FROM kna1 
      INTO TABLE lt_valid_customers
      FOR ALL ENTRIES IN lt_customer_check
      WHERE kunnr = lt_customer_check-kunnr.

    LOOP AT lt_customer_check INTO DATA(ls_customer).
      IF NOT line_exists( lt_valid_customers[ table_line = ls_customer ] ).
        APPEND ls_customer TO lt_invalid_customers.
      ENDIF.
    ENDLOOP.

    DELETE gt_orders WHERE kunnr IN lt_invalid_customers.

    lv_count_valid = lines( gt_orders ).
    WRITE: / 'Valid customers for simulation:', lv_count_valid.

    IF sy-subrc = 0.
      SORT gt_orders BY kunnr matnr.
      DELETE ADJACENT DUPLICATES FROM gt_orders COMPARING kunnr matnr.
    ENDIF.

  ENDMETHOD.

  METHOD process_data.

    CONSTANTS: lc_x TYPE char01 VALUE 'X'.

    DATA: lv_index          TYPE i VALUE 1,
          lv_itemno         TYPE posnr VALUE 10,
          ls_header         TYPE bapisdhead,
          ls_ord_header     TYPE bapisdhd1,
          ls_ord_headerx    TYPE bapisdhd1x,
          ls_headerx        TYPE bapisdheadx,
          ls_item           TYPE bapiitemin,
          lt_ord_item       TYPE TABLE OF bapisditm,
          lt_ord_itemx      TYPE TABLE OF bapisditmx,
          lv_vbeln          TYPE vbeln,
          lv_lines          TYPE i,
          lt_item           TYPE TABLE OF bapiitemin,
          lt_partners       TYPE TABLE OF bapipartnr,
          lt_return         TYPE TABLE OF bapiret2,
          lt_order_partners TYPE TABLE OF bapiparnr.

    DATA(lo_rand) = cl_abap_random=>create( ).
    lv_lines = lines( gt_orders ).

    WHILE gv_count < p_ordctr.

      TRY.
          IF sy-index = lv_lines.
            EXIT.
          ENDIF.

          DATA(ls_order) = VALUE ty_orders( gt_orders[ lo_rand->intinrange( low = 1 high = lv_lines ) ] ).
          ls_header = CORRESPONDING #( ls_order MAPPING doc_type = auart sales_org = vkorg distr_chan = vtweg division = spart ).

          DO 3 TIMES.
            DATA(lv_randomnum) = lo_rand->intinrange( low = 1 high = lv_lines ).
            ls_item =  CORRESPONDING #( gt_orders[ lv_randomnum ] MAPPING material = matnr plant = werks ).

            IF line_exists( gt_errorders[ kunnr = ls_order-kunnr matnr = ls_item-material ] ).
              CONTINUE.
            ENDIF.

            ls_item-po_itm_no = lv_itemno.
            ls_item-target_qty = 1.
            APPEND ls_item TO lt_item.
            CLEAR ls_item.
            lv_itemno = lv_itemno + 10.
            APPEND VALUE #( material = abap_true plant = abap_true ) TO lt_ord_itemx.
          ENDDO.

          IF lt_item[] IS INITIAL.
            CONTINUE.
          ENDIF.

          lt_order_partners = VALUE #( ( partn_role = 'AG' partn_numb = ls_order-kunnr ) ).

          CALL FUNCTION 'BAPI_SALESORDER_SIMULATE'
            EXPORTING order_header_in = ls_header
            IMPORTING salesdocument = lv_vbeln
            TABLES order_items_in = lt_item order_partners = lt_order_partners messagetable = lt_return.

          IF NOT line_exists( lt_return[ type = 'E' ] ).
            gv_count = gv_count + 1.
          ENDIF.

        CATCH cx_root INTO DATA(lo_cx_root).
          WRITE lo_cx_root->get_text( ).
      ENDTRY.

    ENDWHILE.

  ENDMETHOD.

ENDCLASS.
