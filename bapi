*&---------------------------------------------------------------------*
*&  Include  zsim_ord_poc_f01
*&---------------------------------------------------------------------*

CLASS lcl_order_creation IMPLEMENTATION.

  METHOD fetch_data.

    DATA: lv_date TYPE syst_datum.
    DATA(lv_count) = p_ordctr * 100.

    CALL FUNCTION 'CCM_GO_BACK_MONTHS'
      EXPORTING
        currdate   = sy-datum
        backmonths = 60
      IMPORTING
        newdate    = lv_date.

    SELECT vbak~vbeln,
           vbak~auart,
           vbak~vkorg,
           vbak~vtweg,
           vbak~spart,
           vbak~kunnr,
           vbap~posnr,
           vbap~matnr,
           vbap~werks
      FROM vbak AS vbak
      INNER JOIN vbap AS vbap ON vbak~vbeln = vbap~vbeln
      INTO TABLE @gt_orders
      UP TO @lv_count ROWS
      WHERE vbak~vkorg IN @s_vkorg
      AND vbak~vtweg IN @s_vtweg
      AND vbak~spart IN @s_spart
      AND vbak~kunnr IN @s_kunnr
      AND vbap~matnr IN @s_matnr
      AND vbap~werks IN @s_werks
      AND vbak~erdat >= @lv_date AND vbak~erdat <= @sy-datum.

    IF sy-subrc = 0.
      SORT gt_orders BY kunnr matnr.
      DELETE ADJACENT DUPLICATES FROM gt_orders COMPARING kunnr matnr.
    ENDIF.

  ENDMETHOD.

  METHOD process_data.

    CONSTANTS: lc_x TYPE char01 VALUE 'X'.

    DATA: lv_index TYPE i VALUE 1,
          lv_itemno TYPE posnr VALUE 10,
          lt_parallel_data TYPE TABLE OF ty_orders,
          lv_progress TYPE i.

    CALL FUNCTION 'SPBT_INITIALIZE'.

    LOOP AT gt_orders INTO DATA(ls_order).
      APPEND ls_order TO lt_parallel_data.
    ENDLOOP.

    LOOP AT lt_parallel_data INTO DATA(ls_data).

      CALL FUNCTION 'Z_SIMULATE_ORDER'
        STARTING NEW TASK 'TASK'
        PERFORMING handle_simulation ON END OF TASK
        EXPORTING
          is_order = ls_data.

    ENDLOOP.

    CALL FUNCTION 'SPBT_TERMINATE'.

  ENDMETHOD.

  FORM handle_simulation USING is_order TYPE ty_orders.
    DATA: lv_itemno TYPE posnr VALUE 10,
          lt_item TYPE TABLE OF bapiitemin,
          lt_return TYPE TABLE OF bapiret2,
          lv_vbeln TYPE vbeln.

    CALL FUNCTION 'BAPI_SALESORDER_SIMULATE'
      EXPORTING
        order_header_in = CORRESPONDING bapisdhead( is_order )
      IMPORTING
        salesdocument = lv_vbeln
      TABLES
        order_items_in = lt_item
        messagetable = lt_return.

    IF NOT line_exists( lt_return[ type = 'E' ] ).
      gv_count = gv_count + 1.
    ENDIF.

    DATA(lv_progress) = ( gv_count * 100 ) / p_ordctr.
    CALL FUNCTION 'SAPGUI_PROGRESS_INDICATOR'
      EXPORTING
        percentage = lv_progress
        text       = |Simulation Progress: { lv_progress }%|.
  ENDFORM.

ENDCLASS.



CLASS lcl_order_creation IMPLEMENTATION.

  METHOD process_data.

    DATA: lt_parallel_data TYPE TABLE OF ty_orders,
          lv_progress TYPE i.

    CALL FUNCTION 'SPBT_INITIALIZE'.

    LOOP AT gt_orders INTO DATA(ls_order).
      APPEND ls_order TO lt_parallel_data.
    ENDLOOP.

    LOOP AT lt_parallel_data INTO DATA(ls_data).
      CALL FUNCTION 'Z_SIMULATE_ORDER'
        STARTING NEW TASK 'TASK'
        DESTINATION 'NONE'
        PERFORMING handle_simulation ON END OF TASK
        EXPORTING
          is_order = ls_data.
    ENDLOOP.

    CALL FUNCTION 'SPBT_TERMINATE'.

  ENDMETHOD.

  METHOD handle_simulation.
    DATA: lv_itemno TYPE posnr VALUE 10,
          lt_item TYPE TABLE OF bapiitemin,
          lt_return TYPE TABLE OF bapiret2,
          lv_vbeln TYPE vbeln.

    CALL FUNCTION 'BAPI_SALESORDER_SIMULATE'
      EXPORTING
        order_header_in = CORRESPONDING bapisdhead( is_order )
      IMPORTING
        salesdocument = lv_vbeln
      TABLES
        order_items_in = lt_item
        messagetable = lt_return.

    IF NOT line_exists( lt_return[ type = 'E' ] ).
      gv_count = gv_count + 1.
    ENDIF.

    DATA(lv_progress) = ( gv_count * 100 ) / p_ordctr.
    CALL FUNCTION 'SAPGUI_PROGRESS_INDICATOR'
      EXPORTING
        percentage = lv_progress
        text       = |Simulation Progress: { lv_progress }%|.

  ENDMETHOD.

ENDCLASS.



  METHOD process_data.

    DATA: lt_parallel_data TYPE TABLE OF ty_orders,
          lv_progress TYPE i.

    CALL FUNCTION 'SPBT_INITIALIZE'.

    LOOP AT gt_orders INTO DATA(ls_order).
      APPEND ls_order TO lt_parallel_data.
    ENDLOOP.

    LOOP AT lt_parallel_data INTO DATA(ls_data).
      CALL FUNCTION 'Z_SIMULATE_ORDER'
        STARTING NEW TASK 'TASK'
        DESTINATION 'NONE'
        PERFORMING handle_simulation ON END OF TASK
        EXPORTING
          is_order = ls_data.
    ENDLOOP.

    CALL FUNCTION 'SPBT_TERMINATE'.

  ENDMETHOD.

ENDCLASS.

FORM handle_simulation USING is_order TYPE ty_orders.

  DATA: lv_itemno TYPE posnr VALUE 10,
        lt_item TYPE TABLE OF bapiitemin,
        lt_return TYPE TABLE OF bapiret2,
        lv_vbeln TYPE vbeln.

  CALL FUNCTION 'BAPI_SALESORDER_SIMULATE'
    EXPORTING
      order_header_in = CORRESPONDING bapisdhead( is_order )
    IMPORTING
      salesdocument = lv_vbeln
    TABLES
      order_items_in = lt_item
      messagetable = lt_return.

  IF NOT line_exists( lt_return[ type = 'E' ] ).
    gv_count = gv_count + 1.
  ENDIF.

  DATA(lv_progress) = ( gv_count * 100 ) / p_ordctr.
  CALL FUNCTION 'SAPGUI_PROGRESS_INDICATOR'
    EXPORTING
      percentage = lv_progress
      text       = |Simulation Progress: { lv_progress }%|.

ENDFORM.
