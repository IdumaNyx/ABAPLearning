REPORT z_simulate_bapi_orders.

*---------------------------------------------------------------------
* Custom Type Definitions
*---------------------------------------------------------------------
TYPES: BEGIN OF ty_customer.
  " Customer general data from KNA1
  kunnr TYPE kna1-kunnr,
  name1 TYPE kna1-name1,
END OF ty_customer.

TYPES: BEGIN OF ty_sales.
  " Customer sales area data from KNVV
  vkorg TYPE knvv-vkorg,
  vtweg TYPE knvv-vtweg,
  spart TYPE knvv-spart,
END OF ty_sales.

TYPES: BEGIN OF ty_material.
  " Material data from MARA
  matnr TYPE mara-matnr,
  ersda TYPE mara-ersda,
  mtart TYPE mara-mtart,
END OF ty_material.

TYPES: BEGIN OF ty_order.
  order_id   TYPE char10,
  customer   TYPE ty_customer,
  sales_data TYPE ty_sales,
  material   TYPE ty_material,
  quantity   TYPE i,
END OF ty_order.

*---------------------------------------------------------------------
* Global Data Declarations
*---------------------------------------------------------------------
DATA: it_success_orders TYPE STANDARD TABLE OF ty_order WITH DEFAULT KEY,
      it_failed_orders  TYPE STANDARD TABLE OF ty_order WITH DEFAULT KEY.

*---------------------------------------------------------------------
* Selection Screen Parameter: Number of orders to simulate
*---------------------------------------------------------------------
PARAMETERS: p_num_orders TYPE i DEFAULT 10.




*---------------------------------------------------------------------
* Global Declarations for Master Data Tables
*---------------------------------------------------------------------
DATA: it_customers  TYPE STANDARD TABLE OF kna1,
      it_sales_data TYPE STANDARD TABLE OF knvv,
      it_materials  TYPE STANDARD TABLE OF mara.


*---------------------------------------------------------------------
* Local Class for Error Handling
*---------------------------------------------------------------------
CLASS lcl_error_handler DEFINITION.
  PUBLIC SECTION.
    METHODS: handle_error IMPORTING iv_msg TYPE string.
ENDCLASS.

CLASS lcl_error_handler IMPLEMENTATION.
  METHOD handle_error.
    MESSAGE iv_msg TYPE 'E'.  " Display error messages properly
  ENDMETHOD.
ENDCLASS.

*---------------------------------------------------------------------
* Form Routine to Load Master Data with Enhanced Error Handling
*---------------------------------------------------------------------
FORM load_master_data.
  " Create an instance of the error handler class
  DATA(lo_error) = NEW lcl_error_handler( ).

  " Load customer general data from KNA1
  SELECT * FROM kna1 INTO TABLE it_customers.
  IF sy-subrc <> 0.
    lo_error->handle_error( 'Error loading customer data from KNA1' ).
  ELSE.
    WRITE: / 'KNA1 data loaded: ', LINES( it_customers ), ' records.'.
  ENDIF.

  " Load customer sales area data from KNVV
  SELECT * FROM knvv INTO TABLE it_sales_data.
  IF sy-subrc <> 0.
    lo_error->handle_error( 'Error loading sales area data from KNVV' ).
  ELSE.
    WRITE: / 'KNVV data loaded: ', LINES( it_sales_data ), ' records.'.
  ENDIF.

  " Load material data from MARA
  SELECT * FROM mara INTO TABLE it_materials.
  IF sy-subrc <> 0.
    lo_error->handle_error( 'Error loading material data from MARA' ).
  ELSE.
    WRITE: / 'MARA data loaded: ', LINES( it_materials ), ' records.'.
  ENDIF.
ENDFORM.


FORM select_random_data CHANGING eo_order TYPE ty_order.
  DATA: lv_random_index TYPE i,
        lv_max_customers TYPE i VALUE 0,
        lv_max_sales TYPE i VALUE 0,
        lv_max_materials TYPE i VALUE 0.

  " Get table sizes
  lv_max_customers = LINES( it_customers ).
  lv_max_sales = LINES( it_sales_data ).
  lv_max_materials = LINES( it_materials ).

  " Error handling if tables are empty
  IF lv_max_customers = 0 OR lv_max_sales = 0 OR lv_max_materials = 0.
    MESSAGE 'One or more master data tables are empty!' TYPE 'E'.
  ENDIF.

  " --- Random Selection from Customer Data ---
  lv_random_index = cl_abap_random_int=>create( seed = sy-uzeit )->get_next( i_low = 1 i_high = lv_max_customers ).
  READ TABLE it_customers INDEX lv_random_index INTO eo_order-customer.
  IF sy-subrc <> 0.
    MESSAGE 'Error selecting random customer' TYPE 'E'.
  ENDIF.

  " --- Random Selection from Sales Area Data ---
  lv_random_index = cl_abap_random_int=>create( seed = sy-uzeit )->get_next( i_low = 1 i_high = lv_max_sales ).
  READ TABLE it_sales_data INDEX lv_random_index INTO eo_order-sales_data.
  IF sy-subrc <> 0.
    MESSAGE 'Error selecting random sales area' TYPE 'E'.
  ENDIF.

  " --- Random Selection from Material Data ---
  lv_random_index = cl_abap_random_int=>create( seed = sy-uzeit )->get_next( i_low = 1 i_high = lv_max_materials ).
  DATA: ls_material TYPE mara.
  READ TABLE it_materials INDEX lv_random_index INTO ls_material.
  IF sy-subrc = 0.
    eo_order-material-matnr = ls_material-matnr.
    eo_order-material-ersda = ls_material-ersda.
    eo_order-material-mtart = ls_material-mtart.
  ELSE.
    MESSAGE 'Error selecting random material' TYPE 'E'.
  ENDIF.

  " --- Generate a Random Quantity (Between 1 and 100) ---
  eo_order-quantity = cl_abap_random_int=>create( seed = sy-uzeit )->get_next( i_low = 1 i_high = 100 ).

ENDFORM.



start-of-selection.
  START-OF-SELECTION.
  DATA(ls_order) TYPE ty_order.

  PERFORM load_master_data.
  PERFORM select_random_data CHANGING ls_order.

  " Output the selected order details
  WRITE: / 'Selected Customer:', ls_order-customer-kunnr, ls_order-customer-name1.
  WRITE: / 'Sales Area:', ls_order-sales_data-vkorg, ls_order-sales_data-vtweg, ls_order-sales_data-spart.
  WRITE: / 'Selected Material:', ls_order-material-matnr, ls_order-material-mtart.
  WRITE: / 'Quantity:', ls_order-quantity.



