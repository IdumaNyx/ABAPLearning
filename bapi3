REPORT zfetch_cust_mat_data. " Program name - Fetches customer and material data

"=============================
" Step 1: Define Data Structures
"=============================

" Structure to hold required customer fields
TYPES: BEGIN OF ty_customer,
         kunnr TYPE kna1-kunnr,  " Customer Number
         name1 TYPE kna1-name1,  " Customer Name
         land1 TYPE kna1-land1,  " Country
         ort01 TYPE kna1-ort01,  " City
       END OF ty_customer.

" Structure to hold required material fields
TYPES: BEGIN OF ty_material,
         matnr TYPE mara-matnr,  " Material Number
         maktx TYPE makt-maktx,  " Material Description (from MAKT table)
         meins TYPE mara-meins,  " Base Unit of Measure
       END OF ty_material.

" Internal tables to store retrieved data
DATA lt_customers TYPE TABLE OF ty_customer. " Table for customer data
DATA lt_materials TYPE TABLE OF ty_material. " Table for material data

"=============================
" Step 2: Define Input Parameters
"=============================

" User input parameters (mandatory)
PARAMETERS: 
  p_kunnr TYPE kna1-kunnr OBLIGATORY,  " Input field for Customer Number
  p_matnr TYPE mara-matnr OBLIGATORY.  " Input field for Material Number

"=============================
" Step 3: Fetch Customer Data
"=============================
START-OF-SELECTION.

  " Selecting only required fields from KNA1 table (Customer General Data)
  SELECT kunnr, name1, land1, ort01
    FROM kna1
    INTO TABLE lt_customers
    WHERE kunnr = @p_kunnr.

  " Check if any customer data was found
  IF lt_customers IS NOT INITIAL.
    WRITE: / 'Customer Details:'.
    LOOP AT lt_customers INTO DATA(ls_customer). " Loop through customer data
      WRITE: / |Customer: { ls_customer-kunnr }|,
              |Name: { ls_customer-name1 }|,
              |Country: { ls_customer-land1 }|,
              |City: { ls_customer-ort01 }|.
    ENDLOOP.
  ELSE.
    WRITE: / 'No Customer Data Found for the given Customer Number.'.
  ENDIF.

"=============================
" Step 4: Fetch Material Data
"=============================

  " Selecting only required fields from MARA table (Material Master)
  " Joining with MAKT table to fetch material descriptions (MAKT stores text descriptions)
  SELECT mara~matnr, makt~maktx, mara~meins
    FROM mara
    INNER JOIN makt ON makt~matnr = mara~matnr " Joining with MAKT for Material Description
    INTO TABLE lt_materials
    WHERE mara~matnr = @p_matnr
      AND makt~spras = @sy-langu.  " Fetching description based on system language

  " Check if any material data was found
  IF lt_materials IS NOT INITIAL.
    WRITE: / 'Material Details:'.
    LOOP AT lt_materials INTO DATA(ls_material). " Loop through material data
      WRITE: / |Material: { ls_material-matnr }|,
              |Description: { ls_material-maktx }|,
              |Base Unit: { ls_material-meins }|.
    ENDLOOP.
  ELSE.
    WRITE: / 'No Material Data Found for the given Material Number.'.
  ENDIF.

-------------------------------------------------------------


REPORT zfetch_sales_history. " Program name - Fetch Sales Order History

"=============================
" Step 1: Define Data Structures
"=============================

" Structure to hold Sales Order Header Data (VBAK)
TYPES: BEGIN OF ty_vbak,
         vbeln TYPE vbak-vbeln,  " Sales Order Number
         erdat TYPE vbak-erdat,  " Order Date
         kunnr TYPE vbak-kunnr,  " Sold-to Customer
         netwr TYPE vbak-netwr,  " Net Order Value
       END OF ty_vbak.

" Structure to hold Sales Order Item Data (VBAP)
TYPES: BEGIN OF ty_vbap,
         vbeln TYPE vbap-vbeln,  " Sales Order Number
         posnr TYPE vbap-posnr,  " Item Number
         matnr TYPE vbap-matnr,  " Material Number
         kwmeng TYPE vbap-kwmeng, " Order Quantity
         meins TYPE vbap-meins,  " Unit of Measure
       END OF ty_vbap.

" Internal tables to store retrieved sales order data
DATA lt_vbak TYPE TABLE OF ty_vbak. " Table for Sales Order Headers
DATA lt_vbap TYPE TABLE OF ty_vbap. " Table for Sales Order Items

"=============================
" Step 2: Define Input Parameters
"=============================

" User input parameter (mandatory)
PARAMETERS: p_kunnr TYPE vbak-kunnr OBLIGATORY.  " Input field for Customer Number

"=============================
" Step 3: Fetch Sales Order Header Data (VBAK)
"=============================
START-OF-SELECTION.

  " Selecting only required fields from VBAK table (Sales Order Header)
  SELECT vbeln, erdat, kunnr, netwr
    FROM vbak
    INTO TABLE lt_vbak
    WHERE kunnr = @p_kunnr.

  " Check if any sales order data was found
  IF lt_vbak IS NOT INITIAL.
    WRITE: / 'Sales Order History:'.
    LOOP AT lt_vbak INTO DATA(ls_vbak). " Loop through sales order headers
      WRITE: / |Order: { ls_vbak-vbeln }|,
              |Date: { ls_vbak-erdat }|,
              |Customer: { ls_vbak-kunnr }|,
              |Net Value: { ls_vbak-netwr }|.
    ENDLOOP.
  ELSE.
    WRITE: / 'No Sales Orders Found for the given Customer Number.'.
  ENDIF.

"=============================
" Step 4: Fetch Sales Order Item Data (VBAP)
"=============================

  " Selecting only required fields from VBAP table (Sales Order Items)
  SELECT vbeln, posnr, matnr, kwmeng, meins
    FROM vbap
    INTO TABLE lt_vbap
    FOR ALL ENTRIES IN lt_vbak " Fetch items for only the selected sales orders
    WHERE vbeln = lt_vbak-vbeln.

  " Check if any sales order item data was found
  IF lt_vbap IS NOT INITIAL.
    WRITE: / 'Sales Order Item Details:'.
    LOOP AT lt_vbap INTO DATA(ls_vbap). " Loop through sales order items
      WRITE: / |Order: { ls_vbap-vbeln }|,
              |Item: { ls_vbap-posnr }|,
              |Material: { ls_vbap-matnr }|,
              |Quantity: { ls_vbap-kwmeng } { ls_vbap-meins }|.
    ENDLOOP.
  ELSE.
    WRITE: / 'No Sales Order Items Found.'.
  ENDIF.

-----------------------------------------------------------------------------
