REPORT zfetch_cust_mat_data. " Program name - Fetches customer and material data

"=============================
" Step 1: Define Data Structures
"=============================

" Structure to hold required customer fields
TYPES: BEGIN OF ty_customer,
         kunnr TYPE kna1-kunnr,  " Customer Number
         name1 TYPE kna1-name1,  " Customer Name
         land1 TYPE kna1-land1,  " Country
         ort01 TYPE kna1-ort01,  " City
       END OF ty_customer.

" Structure to hold required material fields
TYPES: BEGIN OF ty_material,
         matnr TYPE mara-matnr,  " Material Number
         maktx TYPE makt-maktx,  " Material Description (from MAKT table)
         meins TYPE mara-meins,  " Base Unit of Measure
       END OF ty_material.

" Internal tables to store retrieved data
DATA lt_customers TYPE TABLE OF ty_customer. " Table for customer data
DATA lt_materials TYPE TABLE OF ty_material. " Table for material data

"=============================
" Step 2: Define Input Parameters
"=============================

" User input parameters (mandatory)
PARAMETERS: 
  p_kunnr TYPE kna1-kunnr OBLIGATORY,  " Input field for Customer Number
  p_matnr TYPE mara-matnr OBLIGATORY.  " Input field for Material Number

"=============================
" Step 3: Fetch Customer Data
"=============================
START-OF-SELECTION.

  " Selecting only required fields from KNA1 table (Customer General Data)
  SELECT kunnr, name1, land1, ort01
    FROM kna1
    INTO TABLE lt_customers
    WHERE kunnr = @p_kunnr.

  " Check if any customer data was found
  IF lt_customers IS NOT INITIAL.
    WRITE: / 'Customer Details:'.
    LOOP AT lt_customers INTO DATA(ls_customer). " Loop through customer data
      WRITE: / |Customer: { ls_customer-kunnr }|,
              |Name: { ls_customer-name1 }|,
              |Country: { ls_customer-land1 }|,
              |City: { ls_customer-ort01 }|.
    ENDLOOP.
  ELSE.
    WRITE: / 'No Customer Data Found for the given Customer Number.'.
  ENDIF.

"=============================
" Step 4: Fetch Material Data
"=============================

  " Selecting only required fields from MARA table (Material Master)
  " Joining with MAKT table to fetch material descriptions (MAKT stores text descriptions)
  SELECT mara~matnr, makt~maktx, mara~meins
    FROM mara
    INNER JOIN makt ON makt~matnr = mara~matnr " Joining with MAKT for Material Description
    INTO TABLE lt_materials
    WHERE mara~matnr = @p_matnr
      AND makt~spras = @sy-langu.  " Fetching description based on system language

  " Check if any material data was found
  IF lt_materials IS NOT INITIAL.
    WRITE: / 'Material Details:'.
    LOOP AT lt_materials INTO DATA(ls_material). " Loop through material data
      WRITE: / |Material: { ls_material-matnr }|,
              |Description: { ls_material-maktx }|,
              |Base Unit: { ls_material-meins }|.
    ENDLOOP.
  ELSE.
    WRITE: / 'No Material Data Found for the given Material Number.'.
  ENDIF.

-------------------------------------------------------------


REPORT zfetch_sales_history. " Program name - Fetch Sales Order History

"=============================
" Step 1: Define Data Structures
"=============================

" Structure to hold Sales Order Header Data (VBAK)
TYPES: BEGIN OF ty_vbak,
         vbeln TYPE vbak-vbeln,  " Sales Order Number
         erdat TYPE vbak-erdat,  " Order Date
         kunnr TYPE vbak-kunnr,  " Sold-to Customer
         netwr TYPE vbak-netwr,  " Net Order Value
       END OF ty_vbak.

" Structure to hold Sales Order Item Data (VBAP)
TYPES: BEGIN OF ty_vbap,
         vbeln TYPE vbap-vbeln,  " Sales Order Number
         posnr TYPE vbap-posnr,  " Item Number
         matnr TYPE vbap-matnr,  " Material Number
         kwmeng TYPE vbap-kwmeng, " Order Quantity
         meins TYPE vbap-meins,  " Unit of Measure
       END OF ty_vbap.

" Internal tables to store retrieved sales order data
DATA lt_vbak TYPE TABLE OF ty_vbak. " Table for Sales Order Headers
DATA lt_vbap TYPE TABLE OF ty_vbap. " Table for Sales Order Items

"=============================
" Step 2: Define Input Parameters
"=============================

" User input parameter (mandatory)
PARAMETERS: p_kunnr TYPE vbak-kunnr OBLIGATORY.  " Input field for Customer Number

"=============================
" Step 3: Fetch Sales Order Header Data (VBAK)
"=============================
START-OF-SELECTION.

  " Selecting only required fields from VBAK table (Sales Order Header)
  SELECT vbeln, erdat, kunnr, netwr
    FROM vbak
    INTO TABLE lt_vbak
    WHERE kunnr = @p_kunnr.

  " Check if any sales order data was found
  IF lt_vbak IS NOT INITIAL.
    WRITE: / 'Sales Order History:'.
    LOOP AT lt_vbak INTO DATA(ls_vbak). " Loop through sales order headers
      WRITE: / |Order: { ls_vbak-vbeln }|,
              |Date: { ls_vbak-erdat }|,
              |Customer: { ls_vbak-kunnr }|,
              |Net Value: { ls_vbak-netwr }|.
    ENDLOOP.
  ELSE.
    WRITE: / 'No Sales Orders Found for the given Customer Number.'.
  ENDIF.

"=============================
" Step 4: Fetch Sales Order Item Data (VBAP)
"=============================

  " Selecting only required fields from VBAP table (Sales Order Items)
  SELECT vbeln, posnr, matnr, kwmeng, meins
    FROM vbap
    INTO TABLE lt_vbap
    FOR ALL ENTRIES IN lt_vbak " Fetch items for only the selected sales orders
    WHERE vbeln = lt_vbak-vbeln.

  " Check if any sales order item data was found
  IF lt_vbap IS NOT INITIAL.
    WRITE: / 'Sales Order Item Details:'.
    LOOP AT lt_vbap INTO DATA(ls_vbap). " Loop through sales order items
      WRITE: / |Order: { ls_vbap-vbeln }|,
              |Item: { ls_vbap-posnr }|,
              |Material: { ls_vbap-matnr }|,
              |Quantity: { ls_vbap-kwmeng } { ls_vbap-meins }|.
    ENDLOOP.
  ELSE.
    WRITE: / 'No Sales Order Items Found.'.
  ENDIF.

-----------------------------------------------------------------------------

REPORT zsimulate_sales_order. " Program Name - Simulates Sales Order

"=============================
" Step 1: Define Structures for BAPI
"=============================

" Structure for order header data
DATA: ls_order_header TYPE bapisdh1.

" Internal table for order items
DATA: lt_order_items TYPE TABLE OF bapisditm,
      ls_order_item  TYPE bapisditm.

" Internal table for schedule lines (quantities)
DATA: lt_schedule_lines TYPE TABLE OF bapischdl,
      ls_schedule_line  TYPE bapischdl.

" Internal table for partner function
DATA: lt_partner TYPE TABLE OF bapiparnr,
      ls_partner TYPE bapiparnr.

" BAPI Return Message Table
DATA: lt_return TYPE TABLE OF bapiret2,
      ls_return TYPE bapiret2.

"=============================
" Step 2: Define Input Parameters
"=============================

" Order Input Parameters
PARAMETERS: p_kunnr TYPE kna1-kunnr OBLIGATORY,  " Customer Number (Sold-To)
            p_matnr TYPE mara-matnr OBLIGATORY,  " Material Number
            p_vkorg TYPE knvv-vkorg OBLIGATORY,  " Sales Organization
            p_vtweg TYPE knvv-vtweg OBLIGATORY,  " Distribution Channel
            p_spart TYPE knvv-spart OBLIGATORY,  " Division
            p_qty   TYPE vbap-kwmeng OBLIGATORY. " Order Quantity

"=============================
" Step 3: Validate Customer & Product Data
"=============================

START-OF-SELECTION.

  " Fetch customer sales area data to validate eligibility
  SELECT SINGLE kunnr FROM knvv 
    WHERE kunnr = @p_kunnr
      AND vkorg = @p_vkorg
      AND vtweg = @p_vtweg
      AND spart = @p_spart.

  IF sy-subrc <> 0.
    WRITE: / 'Error: Customer is not valid for the given sales area.'.
    EXIT.
  ENDIF.

  " Fetch product availability from MARA and MVKE
  SELECT SINGLE matnr FROM mvke 
    WHERE matnr = @p_matnr
      AND vkorg = @p_vkorg
      AND vtweg = @p_vtweg.

  IF sy-subrc <> 0.
    WRITE: / 'Error: Material is not available for the selected sales area.'.
    EXIT.
  ENDIF.

  "=============================
  " Step 4: Prepare BAPI Input Data
  "=============================

  " Order Header Data
  ls_order_header-doc_type = 'OR'. " Standard Order
  ls_order_header-sales_org = p_vkorg.
  ls_order_header-distr_chan = p_vtweg.
  ls_order_header-division = p_spart.

  " Order Item Data
  ls_order_item-itm_number = '10'. " Item number
  ls_order_item-material   = p_matnr.
  ls_order_item-target_qty = p_qty.

  " Add item to order items table
  APPEND ls_order_item TO lt_order_items.

  " Schedule Line Data (For Delivery Date & Quantity)
  ls_schedule_line-itm_number = '10'.
  ls_schedule_line-req_qty = p_qty.
  APPEND ls_schedule_line TO lt_schedule_lines.

  " Partner Function Data (Sold-To and Ship-To)
  ls_partner-partn_role = 'AG'. " Sold-To Party
  ls_partner-partn_numb = p_kunnr.
  APPEND ls_partner TO lt_partner.

  ls_partner-partn_role = 'WE'. " Ship-To Party
  ls_partner-partn_numb = p_kunnr.
  APPEND ls_partner TO lt_partner.

  "=============================
  " Step 5: Call BAPI to Simulate Order
  "=============================

  CALL FUNCTION 'BAPI_SALESORDER_SIMULATE'
    EXPORTING
      order_header_in  = ls_order_header
    TABLES
      order_items_in   = lt_order_items
      partneraddresses = lt_partner
      schedule_lines   = lt_schedule_lines
      return           = lt_return.

  "=============================
  " Step 6: Check BAPI Return Messages
  "=============================

  LOOP AT lt_return INTO ls_return.
    WRITE: / ls_return-type, ls_return-message.
  ENDLOOP.

  " Check if there are errors
  READ TABLE lt_return WITH KEY type = 'E' TRANSPORTING NO FIELDS.
  IF sy-subrc = 0.
    WRITE: / 'Simulation Failed. Please check the errors above.'.
  ELSE.
    WRITE: / 'Sales Order Simulation Successful!'.
  ENDIF.

---------------------------------------------------------------------
DATA: lv_matnr TYPE mvke-matnr.  " Declare variable to store material number

SELECT SINGLE matnr 
  INTO lv_matnr   " Store the result into variable
  FROM mvke 
  WHERE matnr = @p_matnr
    AND vkorg = @p_vkorg
    AND vtweg = @p_vtweg.

DATA: lv_kunnr TYPE knvv-kunnr.  " Declare variable to store customer number

SELECT SINGLE kunnr 
  INTO lv_kunnr   " Store the result into variable
  FROM knvv 
  WHERE kunnr = @p_kunnr
    AND vkorg = @p_vkorg
    AND vtweg = @p_vtweg
    AND spart = @p_spart.

__________________________________________________________________________________________________
==================================================================================================

*&---------------------------------------------------------------------*
*& Report zsimulate_bapi_orders5
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
REPORT zsimulate_sales_order. " Program Name - Sales Order Simulation with Validation

"=============================
" Step 1: Define Structures for BAPI
"=============================

" Structure for order header
data(ls_order_header) = VALUE bapisdhead( ).

" Internal table for order items
data lt_order_items TYPE TABLE OF bapiitemin.
"data(lt_order_items) = VALUE TYPE TABLE OF bapiitemin( ).
data(ls_order_item)  = VALUE bapiitemin( ).

" Internal table for schedule lines (quantities)
data lt_schedule_lines TYPE TABLE OF bapischdl.
"data(lt_schedule_lines) = VALUE TABLE OF bapischdl.
data(ls_schedule_line)  = VALUE bapischdl( ).

" Internal table for partner function
data lt_partner TYPE TABLE OF bapiparnr.
"data(lt_partner) = VALUE TABLE OF bapiparnr( ).
data(ls_partner) = VALUE bapiparnr( ).

" BAPI Return Message Table
data lt_return TYPE TABLE OF bapiret2.
"data(lt_return) = VALUE TABLE OF bapiret2( ).
data(ls_return) = VALUE bapiret2( ).

"=============================
" Step 2: Define Input Parameters
"=============================
parameters:
  p_kunnr TYPE kna1-kunnr OBLIGATORY,  " Customer Number (Sold-To)
  p_matnr TYPE mara-matnr OBLIGATORY,  " Material Number
  p_vkorg TYPE knvv-vkorg OBLIGATORY,  " Sales Organization
  p_vtweg TYPE knvv-vtweg OBLIGATORY,  " Distribution Channel
  p_spart TYPE knvv-spart OBLIGATORY,  " Division
  p_qty   TYPE vbap-kwmeng OBLIGATORY. " Order Quantity

"=============================
" Step 3: Validate Customer & Partner Data
"=============================
START-OF-SELECTION.

  " Validate Customer Existence in Sales Area (KNVV)
  DATA(lv_kunnr) = VALUE knvv-kunnr( ).
  SELECT SINGLE kunnr
    INTO @lv_kunnr
    FROM knvv
    WHERE kunnr = @p_kunnr
      AND vkorg = @p_vkorg
      AND vtweg = @p_vtweg
      AND spart = @p_spart.

  IF sy-subrc <> 0.
    WRITE: / 'Error: Customer is not valid for the given Sales Organization and Division.'.
    EXIT.
  ENDIF.

  " Validate Customer Partner Function (Sold-To & Ship-To in KNVP)
  DATA(lv_sold_to) = VALUE knvp-kunnr( ).
  DATA(lv_ship_to) = VALUE knvp-kunnr( ).

  SELECT SINGLE kunnr
    INTO @lv_sold_to
    FROM knvp
    WHERE kunnr = @p_kunnr AND parvw = 'AG'.  " AG = Sold-To Party

  SELECT SINGLE kunnr
    INTO @lv_ship_to
    FROM knvp
    WHERE kunnr = @p_kunnr AND parvw = 'WE'.  " WE = Ship-To Party

  IF lv_sold_to IS INITIAL OR lv_ship_to IS INITIAL.
    WRITE: / 'Error: Customer does not have a valid Sold-To and Ship-To party.'.
    EXIT.
  ENDIF.

"=============================
" Step 4: Validate Material Availability
"=============================
  DATA(lv_matnr) = VALUE mvke-matnr( ).

  SELECT SINGLE matnr
    INTO @lv_matnr
    FROM mvke
    WHERE matnr = @p_matnr
      AND vkorg = @p_vkorg
      AND vtweg = @p_vtweg.

  IF sy-subrc <> 0.
    WRITE: / 'Error: Material is not available for the selected Sales Organization and Distribution Channel.'.
    EXIT.
  ENDIF.

"=============================
" Step 5: Check Stock Availability
"=============================
  DATA(lv_stock_qty) = VALUE mard-labst( ).  " Available stock quantity

  SELECT SINGLE labst
    INTO @lv_stock_qty
    FROM mard
    WHERE matnr = @p_matnr.

  IF sy-subrc <> 0 OR lv_stock_qty < p_qty.
    WRITE: / 'Error: Not enough stock available for this order.'.
    EXIT.
  ENDIF.

"=============================
" Step 6: Prepare BAPI Input Data
"=============================
  " Order Header Data
  ls_order_header = VALUE bapisdhead(
    doc_type = 'OR' " Standard Order
    sales_org = p_vkorg
    distr_chan = p_vtweg
    division = p_spart
  ).

  " Order Item Data
  ls_order_item = VALUE bapiitemin(
    itm_number = '10' " Item number
    material   = p_matnr
    target_qty = p_qty
  ).
  APPEND ls_order_item TO lt_order_items.

  " Schedule Line Data (For Delivery Date & Quantity)
  ls_schedule_line = VALUE bapischdl(
    itm_number = '10'
    req_qty = p_qty
  ).
  APPEND ls_schedule_line TO lt_schedule_lines.

  " Partner Function Data (Sold-To and Ship-To)
  APPEND VALUE bapiparnr( partn_role = 'AG' partn_numb = p_kunnr ) TO lt_partner.
  APPEND VALUE bapiparnr( partn_role = 'WE' partn_numb = p_kunnr ) TO lt_partner.

"=============================
" Step 7: Call BAPI to Simulate Order
"=============================
  CALL FUNCTION 'BAPI_SALESORDER_SIMULATE'
    EXPORTING
      order_header_in  = ls_order_header
    TABLES
      order_items_in   = lt_order_items
      partneraddresses = lt_partner
      schedule_lines   = lt_schedule_lines
      return           = lt_return.

"=============================
" Step 8: Check BAPI Return Messages
"=============================
  LOOP AT lt_return INTO ls_return.
    WRITE: / ls_return-type, ls_return-message.
  ENDLOOP.

  " Check if there are errors
  READ TABLE lt_return WITH KEY type = 'E' TRANSPORTING NO FIELDS.
  IF sy-subrc = 0.
    WRITE: / 'Simulation Failed. Please check the errors above.'.
  ELSE.
    WRITE: / 'Sales Order Simulation Successful!'.
  ENDIF.


__________________________________________________



"=============================
" Step 9: Log Order Simulation Results
"=============================
DATA: lv_log_id TYPE char10.
DATA: lv_status TYPE char10.
DATA: lv_message TYPE char255.

" Generate unique log ID using timestamp
lv_log_id = sy-uzeit.

" Check if there are errors
READ TABLE lt_return WITH KEY type = 'E' TRANSPORTING NO FIELDS.
IF sy-subrc = 0.
  lv_status = 'FAIL'.
  READ TABLE lt_return INTO ls_return WITH KEY type = 'E'.
  lv_message = ls_return-message.
ELSE.
  lv_status = 'SUCCESS'.
  lv_message = 'Sales Order Simulation Successful'.
ENDIF.

" Insert log into custom table
INSERT INTO zorder_sim_log VALUES (
  lv_log_id,
  p_kunnr,
  p_matnr,
  p_qty,
  lv_status,
  lv_message,
  sy-datum
).

COMMIT WORK.

__________________________________________

"=============================
" Step 9: Define Internal Table for Logging
"=============================
DATA: BEGIN OF it_log OCCURS 0,
        log_id   TYPE char10,
        kunnr    TYPE kna1-kunnr,
        matnr    TYPE mara-matnr,
        qty      TYPE vbap-kwmeng,
        status   TYPE char10,
        message  TYPE char255,
        created_on TYPE sy-datum,
      END OF it_log.

DATA: lv_log_id TYPE char10.
DATA: lv_status TYPE char10.
DATA: lv_message TYPE char255.

_______________________________________

" Generate unique log ID using system time
lv_log_id = sy-uzeit.

" Check if there are errors
READ TABLE lt_return WITH KEY type = 'E' TRANSPORTING NO FIELDS.
IF sy-subrc = 0.
  lv_status = 'FAIL'.
  READ TABLE lt_return INTO ls_return WITH KEY type = 'E'.
  lv_message = ls_return-message.
ELSE.
  lv_status = 'SUCCESS'.
  lv_message = 'Sales Order Simulation Successful'.
ENDIF.

" Append log entry to internal table
APPEND INITIAL LINE TO it_log ASSIGNING FIELD-SYMBOL(<log>).
<log>-log_id = lv_log_id.
<log>-kunnr = p_kunnr.
<log>-matnr = p_matnr.
<log>-qty = p_qty.
<log>-status = lv_status.
<log>-message = lv_message.
<log>-created_on = sy-datum.

____________________________<_____________________

"=============================
" Step 10: Display Simulation Logs
"=============================
WRITE: / 'Sales Order Simulation Log:', /.

LOOP AT it_log ASSIGNING <log>.
  WRITE: / 'Log ID:', <log>-log_id, 
          'Customer:', <log>-kunnr, 
          'Material:', <log>-matnr,
          'Qty:', <log>-qty,
          'Status:', <log>-status, 
          'Message:', <log>-message,
          'Date:', <log>-created_on.
ENDLOOP.

_________________________<<<<<<<<<_________

REPORT zsimulate_sales_order. " Program Name - Sales Order Simulation with ALV Log Display

"=============================
" Step 1: Define Internal Table for Logging
"=============================
DATA: it_log TYPE TABLE OF STANDARD TABLE WITH EMPTY KEY.
DATA: BEGIN OF it_log OCCURS 0,
        log_id     TYPE char10,
        kunnr      TYPE kna1-kunnr,
        matnr      TYPE mara-matnr,
        qty        TYPE vbap-kwmeng,
        status     TYPE char10,
        message    TYPE char255,
        created_on TYPE sy-datum,
      END OF it_log.

DATA: lv_log_id TYPE char10.
DATA: lv_status TYPE char10.
DATA: lv_message TYPE char255.

"=============================
" Step 2: Define Selection Screen
"=============================
SELECTION-SCREEN BEGIN OF BLOCK b1 WITH FRAME TITLE text-001.
PARAMETERS: p_kunnr TYPE kna1-kunnr OPTIONAL, " Filter by Customer
            p_matnr TYPE mara-matnr OPTIONAL, " Filter by Material
            p_status TYPE char10 OPTIONAL.    " Filter by Status
SELECTION-SCREEN END OF BLOCK b1.

SELECTION-SCREEN BEGIN OF BLOCK b2 WITH FRAME TITLE text-002.
PARAMETERS: p_date_from TYPE sy-datum OBLIGATORY, " Date Range - From
            p_date_to TYPE sy-datum OBLIGATORY.   " Date Range - To
SELECTION-SCREEN END OF BLOCK b2.

"=============================
" Step 3: Fetch and Display Logs in ALV
"=============================
START-OF-SELECTION.

" Validate Date Range
IF p_date_from > p_date_to.
  WRITE: / 'Error: Invalid date range. The FROM date must be before TO date.'.
  EXIT.
ENDIF.

" Filter logs based on selection screen inputs
DATA: lt_display TYPE TABLE OF it_log.

LOOP AT it_log INTO DATA(ls_log).
  IF ( p_kunnr IS NOT INITIAL AND ls_log-kunnr <> p_kunnr ) OR
     ( p_matnr IS NOT INITIAL AND ls_log-matnr <> p_matnr ) OR
     ( p_status IS NOT INITIAL AND ls_log-status <> p_status ) OR
     ( ls_log-created_on < p_date_from OR ls_log-created_on > p_date_to ).
    CONTINUE.
  ENDIF.
  APPEND ls_log TO lt_display.
ENDLOOP.

" Check if there is any data to display
IF lt_display IS INITIAL.
  WRITE: / 'No logs found for the selected criteria.'.
  EXIT.
ENDIF.

" Display logs using ALV
DATA: lo_alv TYPE REF TO cl_salv_table.

TRY.
    cl_salv_table=>factory( IMPORTING r_salv_table = lo_alv CHANGING t_table = lt_display ).
    lo_alv->display( ).
  CATCH cx_salv_msg.
    WRITE: / 'Error displaying ALV report.'.
ENDTRY.

--------------------------------------------------------------------------------------

REPORT zsimulate_sales_order. " Program Name - Sales Order Simulation with ALV Log Display

"=============================
" Step 1: Define Internal Table for Logging
"=============================

TYPES: BEGIN OF ty_log,
        log_id     TYPE char10,
        kunnr      TYPE kna1-kunnr,
        matnr      TYPE mara-matnr,
        qty        TYPE vbap-kwmeng,
        status     TYPE char10,
        message    TYPE char255,
        created_on TYPE sy-datum,
      END OF ty_log,
      it_log TYPE TABLE OF ty_log WITH EMPTY KEY.

DATA: lv_log_id TYPE char10,
      lv_status TYPE char10,
      lv_message TYPE char255,
      it_log TYPE TABLE OF ty_log WITH EMPTY KEY,
      ls_log TYPE ty_log.
"=============================
" Step 2: Define Selection Screen
"=============================
SELECTION-SCREEN BEGIN OF BLOCK b1 WITH FRAME TITLE text-001.
PARAMETERS: p_kunnr TYPE kna1-kunnr, " Filter by Customer
            p_matnr TYPE mara-matnr, " Filter by Material
            p_status TYPE char10.    " Filter by Status
SELECTION-SCREEN END OF BLOCK b1.

SELECTION-SCREEN BEGIN OF BLOCK b2 WITH FRAME TITLE text-002.
PARAMETERS: p_d_form TYPE sy-datum OBLIGATORY, " Date Range - From
            p_dat_to TYPE sy-datum OBLIGATORY.   " Date Range - To
SELECTION-SCREEN END OF BLOCK b2.

"=============================
" Step 3: Fetch and Display Logs in ALV
"=============================
START-OF-SELECTION.

" Validate Date Range
IF p_d_form > p_dat_to.
  WRITE: / 'Error: Invalid date range. The FROM date must be before TO date.'.
  EXIT.
ENDIF.

" Filter logs based on selection screen inputs
DATA: lt_display TYPE TABLE OF ty_log.

LOOP AT it_log INTO ls_log.
  IF ( p_kunnr IS NOT INITIAL AND ls_log-kunnr <> p_kunnr ) OR
     ( p_matnr IS NOT INITIAL AND ls_log-matnr <> p_matnr ) OR
     ( p_status IS NOT INITIAL AND ls_log-status <> p_status ) OR
     ( ls_log-created_on < p_d_form OR ls_log-created_on > p_dat_to ).
    CONTINUE.
  ENDIF.
  APPEND ls_log TO lt_display.
ENDLOOP.

" Check if there is any data to display
IF lt_display IS INITIAL.
  WRITE: / 'No logs found for the selected criteria.'.
  EXIT.
ENDIF.

" Display logs using ALV
DATA: lo_alv TYPE REF TO cl_salv_table.

TRY.
    cl_salv_table=>factory( IMPORTING r_salv_table = lo_alv CHANGING t_table = lt_display ).
    lo_alv->display( ).
  CATCH cx_salv_msg.
    WRITE: / 'Error displaying ALV report.'.
ENDTRY.

--------------------------------------------------------------------------------------------------------------------------

DATA: lt_customers TYPE TABLE OF kna1-kunnr,
      lt_materials TYPE TABLE OF mara-matnr,
      ls_customer TYPE kna1-kunnr,
      ls_material TYPE mara-matnr.

" Fetch Random Customers
SELECT kunnr FROM kna1 INTO TABLE lt_customers UP TO p_order_count ROWS.

" Fetch Random Materials
SELECT matnr FROM mara INTO TABLE lt_materials UP TO p_order_count ROWS.

_______/_________/_//
LOOP AT lt_customers INTO ls_customer.
  LOOP AT lt_materials INTO ls_material.

    " Ensure no duplicate orders for same customer & material
    READ TABLE it_log WITH KEY kunnr = ls_customer matnr = ls_material TRANSPORTING NO FIELDS.
    IF sy-subrc = 0.
      CONTINUE. " Skip if order already exists
    ENDIF.

    " Generate unique log ID
    lv_log_id = sy-uzeit.

    " Call BAPI to Simulate Order
    CLEAR: lv_status, lv_message.
    
    CALL FUNCTION 'BAPI_SALESORDER_SIMULATE'
      EXPORTING
        order_header_in = VALUE bapisdhead(
          doc_type = 'OR',
          sales_org = p_vkorg,
          distr_chan = p_vtweg,
          division = p_spart
        )
      TABLES
        order_items_in = VALUE TABLE OF bapiitemin(
          ( itm_number = '10'
            material = ls_material
            target_qty = p_qty )
        )
        partneraddresses = VALUE TABLE OF bapiparnr(
          ( partn_role = 'AG' partn_numb = ls_customer )
          ( partn_role = 'WE' partn_numb = ls_customer )
        )
        return = lt_return.

    " Check for errors
    READ TABLE lt_return WITH KEY type = 'E' TRANSPORTING NO FIELDS.
    IF sy-subrc = 0.
      lv_status = 'FAIL'.
      READ TABLE lt_return INTO ls_return WITH KEY type = 'E'.
      lv_message = ls_return-message.
    ELSE.
      lv_status = 'SUCCESS'.
      lv_message = 'Sales Order Simulation Successful'.
    ENDIF.

    " Append log entry
    APPEND VALUE ty_log(
      log_id = lv_log_id
      kunnr = ls_customer
      matnr = ls_material
      qty = p_qty
      status = lv_status
      message = lv_message
      created_on = sy-datum
    ) TO it_log.

  ENDLOOP.
ENDLOOP.

WRITE: / 'Simulation for multiple orders completed.'.